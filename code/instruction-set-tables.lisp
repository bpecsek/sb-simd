(in-package #:sb-simd-sse)

(sb-simd::define-instruction-set #:sse
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   (f32!-from-p128    nil        (f32) (p128)          :cost 1 :encoding :custom)
   ;; f32.4
   (f32.4!-from-f32   nil        (f32.4) (f32)         :cost 1 :encoding :custom)
   (make-f32.4        nil        (f32.4) (f32 f32 f32 f32) :cost 1 :encoding :none)
   (f32.4-values      nil        (f32 f32 f32 f32) (f32.4) :cost 1 :encoding :none)
   (f32.4-broadcast   nil        (f32.4) (f32)         :cost 1 :encoding :none)
   (two-arg-f32.4-and #:andps    (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-f32.4-or  #:orps     (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-f32.4-xor #:xorps    (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-f32.4-max #:maxps    (f32.4) (f32.4 f32.4) :cost 3 :encoding :sse :commutative t)
   (two-arg-f32.4-min #:minps    (f32.4) (f32.4 f32.4) :cost 3 :encoding :sse :commutative t)
   (two-arg-f32.4+    #:addps    (f32.4) (f32.4 f32.4) :cost 2 :encoding :sse :commutative t)
   (two-arg-f32.4-    #:subps    (f32.4) (f32.4 f32.4) :cost 2 :encoding :sse)
   (two-arg-f32.4*    #:mulps    (f32.4) (f32.4 f32.4) :cost 2 :encoding :sse :commutative t)
   (two-arg-f32.4/    #:divps    (f32.4) (f32.4 f32.4) :cost 8 :encoding :sse)
   (two-arg-f32.4=    #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :eq :commutative t)
   (two-arg-f32.4/=   #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :neq :commutative t)
   (two-arg-f32.4<    #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :lt)
   (two-arg-f32.4<=   #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :le)
   (two-arg-f32.4>    #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :nle)
   (two-arg-f32.4>=   #:cmpps    (f32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :nlt)
   (f32.4-andnot      #:andnps   (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse)
   (f32.4-not         nil        (f32.4) (f32.4)       :cost 1 :encoding :none)
   (f32.4-reciprocal  #:rcpps    (f32.4) (f32.4)       :cost 5)
   (f32.4-rsqrt       #:rsqrtps  (f32.4) (f32.4)       :cost 5)
   (f32.4-sqrt        #:sqrtps   (f32.4) (f32.4)       :cost 15)
   (f32.4-shuffle     #:shufps   (f32.4) (f32.4 sb-simd::imm8) :cost 1)
   (f32.4-unpacklo    #:unpcklps (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse)
   (f32.4-unpackhi    #:unpckhps (f32.4) (f32.4 f32.4) :cost 1 :encoding :sse))
  (:loads
   (f32.4-load        #:movups  f32.4 f32vec f32.4-aref f32.4-row-major-aref))
  (:stores
   (f32.4-store       #:movups  f32.4 f32vec f32.4-aref f32.4-row-major-aref)
   (f32.4-ntstore     #:movntps f32.4 f32vec f32.4-non-temporal-aref f32.4-non-temporal-row-major-aref)))

(in-package #:sb-simd-sse2)

(sb-simd::define-instruction-set #:sse2
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   (f64!-from-p128    nil          (f64)   (p128)        :cost 1 :encoding :custom)
   (u64!-from-p128    #:movq       (u64)   (p128)        :cost 1)
   ;; f32.4
   (f32.4!-from-p128  #:movaps     (f32.4) (p128)        :cost 1 :encoding :move)
   (two-arg-f32.4=    #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :eq :commutative t)
   (two-arg-f32.4/=   #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :neq :commutative t)
   (two-arg-f32.4<    #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :lt)
   (two-arg-f32.4<=   #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :le)
   (two-arg-f32.4>    #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :nle)
   (two-arg-f32.4>=   #:cmpps      (u32.4) (f32.4 f32.4) :cost 4 :encoding :sse :prefix :nlt)
   ;; f64.2
   (f64.2!-from-f64   nil          (f64.2) (f64)         :cost 1 :encoding :custom)
   (f64.2!-from-p128  #:movapd     (f64.2) (p128)        :cost 1 :encoding :move)
   (make-f64.2        nil          (f64.2) (f64 f64)     :cost 1 :encoding :none)
   (f64.2-values      nil          (f64 f64) (f64.2)     :cost 1 :encoding :none)
   (f64.2-broadcast   nil          (f64.2) (f64)         :cost 1 :encoding :none)
   (two-arg-f64.2-and #:andpd      (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-f64.2-or  #:orpd       (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-f64.2-xor #:xorpd      (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-f64.2-max #:maxpd      (f64.2) (f64.2 f64.2) :cost 3 :encoding :sse :commutative t)
   (two-arg-f64.2-min #:minpd      (f64.2) (f64.2 f64.2) :cost 3 :encoding :sse :commutative t)
   (two-arg-f64.2+    #:addpd      (f64.2) (f64.2 f64.2) :cost 2 :encoding :sse :commutative t)
   (two-arg-f64.2-    #:subpd      (f64.2) (f64.2 f64.2) :cost 2 :encoding :sse)
   (two-arg-f64.2*    #:mulpd      (f64.2) (f64.2 f64.2) :cost 2 :encoding :sse :commutative t)
   (two-arg-f64.2/    #:divpd      (f64.2) (f64.2 f64.2) :cost 8 :encoding :sse)
   (two-arg-f64.2=    #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :eq :commutative t)
   (two-arg-f64.2/=   #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :neq :commutative t)
   (two-arg-f64.2<    #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :lt)
   (two-arg-f64.2<=   #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :le)
   (two-arg-f64.2>    #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :nle)
   (two-arg-f64.2>=   #:cmppd      (u64.2) (f64.2 f64.2) :cost 4 :encoding :sse :prefix :nlt)
   (f64.2-andnot      #:andnpd     (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse)
   (f64.2-not         nil          (f64.2) (f64.2)       :cost 1 :encoding :none)
   (f64.2-sqrt        #:sqrtpd     (f64.2) (f64.2)       :cost 20)
   (f64.2-unpackhi    #:unpckhpd   (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse)
   (f64.2-unpacklo    #:unpcklpd   (f64.2) (f64.2 f64.2) :cost 1 :encoding :sse)
   (f64.2-shuffle     #:shufpd     (f64.2) (f64.2 sb-simd::imm2) :cost 1)
   ;; u8.16
   (u8.16!-from-u8    #:movq       (u8.16) (u8)          :cost 1)
   (u8.16!-from-p128  #:movdqa     (u8.16) (p128)        :cost 1 :encoding :move)
   (make-u8.16        nil          (u8.16) (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) :cost 1 :encoding :none)
   (u8.16-values      nil          (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) (u8.16) :cost 1 :encoding :none)
   (u8.16-broadcast   nil          (u8.16) (u8)          :cost 1 :encoding :none)
   (two-arg-u8.16-and #:pand       (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse :commutative t)
   (two-arg-u8.16-or  #:por        (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse :commutative t)
   (two-arg-u8.16-xor #:pxor       (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse :commutative t)
   (u8.16-andnot      #:pandn      (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse)
   (u8.16-not         nil          (u8.16) (u8.16)       :cost 1 :encoding :none)
   (two-arg-u8.16+    #:paddb      (u8.16) (u8.16 u8.16) :cost 2 :encoding :sse :commutative t)
   (two-arg-u8.16-    #:psubb      (u8.16) (u8.16 u8.16) :cost 2 :encoding :sse)
   (u8.16-average     #:pavgw      (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse)
   (u8.16-unpackhi    #:punpckhbw  (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse)
   (u8.16-unpacklo    #:punpcklbw  (u8.16) (u8.16 u8.16) :cost 1 :encoding :sse)
   ;; u16.8
   (u16.8!-from-u16   #:movq       (u16.8) (u16)         :cost 1)
   (u16.8!-from-p128  #:movdqa     (u16.8) (p128)        :cost 1 :encoding :move)
   (make-u16.8        nil          (u16.8) (u16 u16 u16 u16 u16 u16 u16 u16) :cost 1 :encoding :none)
   (u16.8-values      nil          (u16 u16 u16 u16 u16 u16 u16 u16) (u16.8) :cost 1 :encoding :none)
   (u16.8-broadcast   nil          (u16.8) (u16)         :cost 1 :encoding :none)
   (two-arg-u16.8-and #:pand       (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse :commutative t)
   (two-arg-u16.8-or  #:por        (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse :commutative t)
   (two-arg-u16.8-xor #:pxor       (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse :commutative t)
   (u16.8-andnot      #:pandn      (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse)
   (u16.8-not         nil          (u16.8) (u16.8)       :cost 1 :encoding :none)
   (two-arg-u16.8+    #:paddw      (u16.8) (u16.8 u16.8) :cost 2 :encoding :sse :commutative t)
   (two-arg-u16.8-    #:psubw      (u16.8) (u16.8 u16.8) :cost 2 :encoding :sse)
   (u16.8-average     #:pavgb      (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse)
   (u16.8-unpackhi    #:punpckhwd  (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse)
   (u16.8-unpacklo    #:punpcklwd  (u16.8) (u16.8 u16.8) :cost 1 :encoding :sse)
   (u16.8-elt         #:pextrw     (u16)   (u16.8 sb-simd::imm3) :cost 1)
   (u16.8-shufflehi   #:pshufhw    (u16.8) (u16.8 sb-simd::imm8) :cost 1)
   (u16.8-shufflelo   #:pshuflw    (u16.8) (u16.8 sb-simd::imm8) :cost 1)
   (u16.8-shiftl      #:psllw-imm  (u16.8) (u16.8 sb-simd::imm4) :cost 1 :encoding :sse)
   (u16.8-shiftr      #:psrlw-imm  (u16.8) (u16.8 sb-simd::imm4) :cost 1 :encoding :sse)
   ;; u32.4
   (u32.4!-from-u32   #:movq       (u32.4) (u16)         :cost 1)
   (u32.4!-from-p128  #:movdqa     (u32.4) (p128)        :cost 1 :encoding :move)
   (make-u32.4        nil          (u32.4) (u32 u32 u32 u32) :cost 1 :encoding :none)
   (u32.4-values      nil          (u32 u32 u32 u32) (u32.4) :cost 1 :encoding :none)
   (u32.4-broadcast   nil          (u32.4) (u32)         :cost 1 :encoding :none)
   (u32.4-from-f64.2  #:cvtpd2dq   (u32.4) (f64.2)       :cost 5)
   (two-arg-u32.4-and #:pand       (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-u32.4-or  #:por        (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-u32.4-xor #:pxor       (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse :commutative t)
   (u32.4-andnot      #:pandn      (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse)
   (u32.4-not         nil          (u32.4) (u32.4)       :cost 1 :encoding :none)
   (two-arg-u32.4+    #:paddd      (u32.4) (u32.4 u32.4) :cost 2 :encoding :sse :commutative t)
   (two-arg-u32.4-    #:psubd      (u32.4) (u32.4 u32.4) :cost 2 :encoding :sse)
   (u32.4-unpackhi    #:punpckhdq  (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse)
   (u32.4-unpacklo    #:punpckldq  (u32.4) (u32.4 u32.4) :cost 1 :encoding :sse)
   (u32.4-shuffle     #:pshufd     (u32.4) (u32.4 sb-simd::imm8) :cost 1)
   (u32.4-shiftl      #:pslld-imm  (u32.4) (u32.4 sb-simd::imm5) :cost 1 :encoding :sse)
   (u32.4-shiftr      #:psrld-imm  (u32.4) (u32.4 sb-simd::imm5) :cost 1 :encoding :sse)
   ;; u64.2
   (u64.2!-from-u64   #:movq       (u64.2) (u64)         :cost 1)
   (u64.2!-from-p128  #:movdqa     (u64.2) (p128)        :cost 1 :encoding :move)
   (make-u64.2        nil          (u64.2) (u64 u64)     :cost 1 :encoding :none)
   (u64.2-values      nil          (u64 u64) (u64.2)     :cost 1 :encoding :none)
   (u64.2-broadcast   nil          (u64.2) (u64)         :cost 1 :encoding :none)
   (two-arg-u64.2-and #:pand       (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-u64.2-or  #:por        (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-u64.2-xor #:pxor       (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse :commutative t)
   (u64.2-andnot      #:pandn      (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse)
   (u64.2-not         nil          (u64.2) (u64.2)       :cost 1 :encoding :none)
   (two-arg-u64.2+    #:paddq      (u64.2) (u64.2 u64.2) :cost 2 :encoding :sse :commutative t)
   (two-arg-u64.2-    #:psubq      (u64.2) (u64.2 u64.2) :cost 2 :encoding :sse)
   (u64.2-unpackhi    #:punpckhqdq (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse)
   (u64.2-unpacklo    #:punpcklqdq (u64.2) (u64.2 u64.2) :cost 1 :encoding :sse)
   (u64.2-shiftl      #:psllq-imm  (u64.2) (u64.2 sb-simd::imm6) :cost 1 :encoding :sse)
   (u64.2-shiftr      #:psrlq-imm  (u64.2) (u64.2 sb-simd::imm6) :cost 1 :encoding :sse)
   ;; s8.16
   (s8.16!-from-s8    nil          (s8.16) (s8)          :cost 1 :encoding :none)
   (s8.16!-from-p128  #:movdqa     (s8.16) (p128)        :cost 1 :encoding :move)
   (make-s8.16        nil          (s8.16) (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) :cost 1 :encoding :none)
   (s8.16-values      nil          (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) (s8.16) :cost 1 :encoding :none)
   (s8.16-broadcast   nil          (s8.16) (s8)          :cost 1 :encoding :none)
   (two-arg-s8.16-and #:pand       (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse :commutative t)
   (two-arg-s8.16-or  #:por        (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse :commutative t)
   (two-arg-s8.16-xor #:pxor       (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse :commutative t)
   (s8.16-andnot      #:pandn      (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse)
   (s8.16-not         nil          (s8.16) (s8.16)       :cost 1 :encoding :none)
   (two-arg-s8.16+    #:paddb      (s8.16) (s8.16 s8.16) :cost 2 :encoding :sse :commutative t)
   (two-arg-s8.16-    #:psubb      (s8.16) (s8.16 s8.16) :cost 2 :encoding :sse)
   (s8.16-unpackhi    #:punpckhbw  (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse)
   (s8.16-unpacklo    #:punpcklbw  (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse)
   ;; s16.8
   (s16.8!-from-s16   nil          (s16.8) (s16)         :cost 1 :encoding :none)
   (s16.8!-from-p128  #:movdqa     (s16.8) (p128)        :cost 1 :encoding :move)
   (make-s16.8        nil          (s16.8) (s16 s16 s16 s16 s16 s16 s16 s16) :cost 1 :encoding :none)
   (s16.8-values      nil          (s16 s16 s16 s16 s16 s16 s16 s16) (s16.8) :cost 1 :encoding :none)
   (s16.8-broadcast   nil          (s16.8) (s16)         :cost 1 :encoding :none)
   (two-arg-s16.8-and #:pand       (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse :commutative t)
   (two-arg-s16.8-or  #:por        (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse :commutative t)
   (two-arg-s16.8-xor #:pxor       (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse :commutative t)
   (s16.8-andnot      #:pandn      (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse)
   (s16.8-not         nil          (s16.8) (s16.8)       :cost 1 :encoding :none)
   (two-arg-s16.8+    #:paddw      (s16.8) (s16.8 s16.8) :cost 2 :encoding :sse :commutative t)
   (two-arg-s16.8-    #:psubw      (s16.8) (s16.8 s16.8) :cost 2 :encoding :sse)
   (s16.8-unpackhi    #:punpckhwd  (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse)
   (s16.8-unpacklo    #:punpcklwd  (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse)
   (s16.8-mullo       #:pmullw     (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse)
   (s16.8-elt         #:pextrw     (s16)   (s16.8 sb-simd::imm3) :cost 1)
   (s16.8-shufflehi   #:pshufhw    (s16.8) (s16.8 sb-simd::imm8) :cost 1)
   (s16.8-shufflelo   #:pshuflw    (s16.8) (s16.8 sb-simd::imm8) :cost 1)
   (s16.8-shiftl      #:psllw-imm  (s16.8) (s16.8 sb-simd::imm4) :cost 1 :encoding :sse)
   (s16.8-shiftr      #:psrlw-imm  (s16.8) (s16.8 sb-simd::imm4) :cost 1 :encoding :sse)
   ;; s32.4
   (s32.4!-from-s32   nil          (s32.4) (s32)         :cost 1 :encoding :none)
   (s32.4!-from-p128  #:movdqa     (s32.4) (p128)        :cost 1 :encoding :move)
   (make-s32.4        nil          (s32.4) (s32 s32 s32 s32) :cost 1 :encoding :none)
   (s32.4-values      nil          (s32 s32 s32 s32) (s32.4) :cost 1 :encoding :none)
   (s32.4-broadcast   nil          (s32.4) (s32)         :cost 1 :encoding :none)
   (s32.4-from-f32.4  #:cvtps2dq   (s32.4) (f32.4)       :cost 5)
   (s32.4-from-f64.2  #:cvtpd2dq   (s32.4) (f64.2)       :cost 1)
   (two-arg-s32.4-and #:pand       (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-s32.4-or  #:por        (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse :commutative t)
   (two-arg-s32.4-xor #:pxor       (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse :commutative t)
   (s32.4-andnot      #:pandn      (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse)
   (s32.4-not         nil          (s32.4) (s32.4)       :cost 1 :encoding :none)
   (two-arg-s32.4+    #:paddd      (s32.4) (s32.4 s32.4) :cost 2 :encoding :sse :commutative t)
   (two-arg-s32.4-    #:psubd      (s32.4) (s32.4 s32.4) :cost 2 :encoding :sse)
   (s32.4-unpackhi    #:punpckhdq  (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse)
   (s32.4-unpacklo    #:punpckldq  (s32.4) (s32.4 s32.4) :cost 1 :encoding :sse)
   (s32.4-shuffle     #:pshufd     (s32.4) (s32.4 sb-simd::imm8) :cost 1)
   (s32.4-shiftl      #:pslld-imm  (s32.4) (s32.4 sb-simd::imm5) :cost 1 :encoding :sse)
   (s32.4-shiftr      #:psrld-imm  (s32.4) (s32.4 sb-simd::imm5) :cost 1 :encoding :sse)
   ;; s64.2
   (s64.2!-from-s64   nil          (s64.2) (s64)         :cost 1 :encoding :none)
   (s64.2!-from-p128  #:movdqa     (s64.2) (p128)        :cost 1 :encoding :move)
   (make-s64.2        nil          (s64.2) (s64 s64)     :cost 1 :encoding :none)
   (s64.2-values      nil          (s64 s64) (s64.2)     :cost 1 :encoding :none)
   (s64.2-broadcast   nil          (s64.2) (s64)         :cost 1 :encoding :none)
   (two-arg-s64.2-and #:pand       (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-s64.2-or  #:por        (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse :commutative t)
   (two-arg-s64.2-xor #:pxor       (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse :commutative t)
   (s64.2-andnot      #:pandn      (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse)
   (s64.2-not         nil          (s64.2) (s64.2)       :cost 1 :encoding :none)
   (two-arg-s64.2+    #:paddq      (s64.2) (s64.2 s64.2) :cost 2 :encoding :sse :commutative t)
   (two-arg-s64.2-    #:psubq      (s64.2) (s64.2 s64.2) :cost 2 :encoding :sse)
   (s64.2-unpackhi    #:punpckhqdq (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse)
   (s64.2-unpacklo    #:punpcklqdq (s64.2) (s64.2 s64.2) :cost 1 :encoding :sse)
   (s64.2-shiftl      #:psllq-imm  (s64.2) (s64.2 sb-simd::imm6) :cost 1 :encoding :sse)
   (s64.2-shiftr      #:psrlq-imm  (s64.2) (s64.2 sb-simd::imm6) :cost 1 :encoding :sse))
  (:loads
   (f64.2-load #:movupd f64.2 f64vec f64.2-aref f64.2-row-major-aref)
   ;(u8.16-load #:movdqa u8.16 u8vec  u8.16-aref u8.16-row-major-aref)
   (u16.8-load #:movdqa u16.8 u16vec u16.8-aref u16.8-row-major-aref)
   (u32.4-load #:movdqa u32.4 u32vec u32.4-aref u32.4-row-major-aref)
   (u64.2-load #:movdqa u64.2 u64vec u64.2-aref u64.2-row-major-aref)
   ;(s8.16-load #:movdqa s8.16 s8vec  s8.16-aref s8.16-row-major-aref)
   (s16.8-load #:movdqa s16.8 s16vec s16.8-aref s16.8-row-major-aref)
   (s32.4-load #:movdqa s32.4 s32vec s32.4-aref s32.4-row-major-aref)
   (s64.2-load #:movdqa s64.2 s64vec s64.2-aref s64.2-row-major-aref))
  (:stores
   (f64.2-store #:movupd f64.2 f64vec f64.2-aref f64.2-row-major-aref)
   ;(u8.16-store #:movdqa u8.16 u8vec  u8.16-aref u8.16-row-major-aref)
   (u16.8-store #:movdqa u16.8 u16vec u16.8-aref u16.8-row-major-aref)
   (u32.4-store #:movdqa u32.4 u32vec u32.4-aref u32.4-row-major-aref)
   (u64.2-store #:movdqa u64.2 u64vec u64.2-aref u64.2-row-major-aref)
   ;(s8.16-store #:movdqa s8.16 u8vec  s8.16-aref s8.16-row-major-aref)
   (s16.8-store #:movdqa s16.8 s16vec s16.8-aref s16.8-row-major-aref)
   (s32.4-store #:movdqa s32.4 s32vec s32.4-aref s32.4-row-major-aref)
   (s64.2-store #:movdqa s64.2 s64vec s64.2-aref s64.2-row-major-aref)
   (f64.2-ntstore #:movntpd f64.2 f64vec f64.2-non-temporal-aref f64.2-non-temporal-row-major-aref)
   ;(u8.16-ntstore #:movntdq u8.16 u8vec  u8.16-non-temporal-aref u8.16-non-temporal-row-major-aref)
   (u16.8-ntstore #:movntdq u16.8 u16vec u16.8-non-temporal-aref u16.8-non-temporal-row-major-aref)
   (u32.4-ntstore #:movntdq u32.4 u32vec u32.4-non-temporal-aref u32.4-non-temporal-row-major-aref)
   (u64.2-ntstore #:movntdq u64.2 u64vec u64.2-non-temporal-aref u64.2-non-temporal-row-major-aref)
   ;(s8.16-ntstore #:movntdq s8.16 s8vec  s8.16-non-temporal-aref s8.16-non-temporal-row-major-aref)
   (s16.8-ntstore #:movntdq s16.8 s16vec s16.8-non-temporal-aref s16.8-non-temporal-row-major-aref)
   (s32.4-ntstore #:movntdq s32.4 s32vec s32.4-non-temporal-aref s32.4-non-temporal-row-major-aref)
   (s64.2-ntstore #:movntdq s64.2 s64vec s64.2-non-temporal-aref s64.2-non-temporal-row-major-aref)))

(in-package #:sb-simd-sse3)

(sb-simd::define-instruction-set #:sse3
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   (f32.4-hdup      #:movshdup (f32.4) (f32.4) :cost 1)
   (f32.4-ldup      #:movsldup (f32.4) (f32.4) :cost 1)
   (f64.2-broadcast #:movddup  (f64.2) (f64.2) :cost 1)))

(in-package #:sb-simd-ssse3)

(sb-simd::define-instruction-set #:ssse3
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   ;; u16.8
   (u16.8-hadd    #:phaddw    (u16.8) (u16.8 u16.8) :cost 3 :encoding :sse)
   (u16.8-hsub    #:phsubw    (u16.8) (u16.8 u16.8) :cost 3 :encoding :sse)
   ;; u32.4
   (u32.4-hadd    #:phaddd    (u32.4) (u32.4 u32.4) :cost 3 :encoding :sse)
   (u32.4-hsub    #:phsubd    (u32.4) (u32.4 u32.4) :cost 3 :encoding :sse)
   ;; s8.16
   (s8.16-shuffle #:pshufb    (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse)
   (s8.16-abs     #:pabsb     (s8.16) (s8.16)       :cost 2)
   (s8.16-sign    #:psignb    (s8.16) (s8.16 s8.16) :cost 1 :encoding :sse)
   ;; s16.8
   (two-arg-s16.8-mulhrs #:pmulhrsw  (s16.8) (s16.8 s16.8) :cost 1 :encoding :sse :commutative t)
   (s16.8-abs     #:pabsw     (s16.8) (s16.8)       :cost 2)
   (s16.8-maddubs #:pmaddubsw (s16.8) (u16.8 s16.8) :cost 2 :encoding :sse)
   (s16.8-sign    #:psignw    (s16.8) (s16.8 s16.8) :cost 2 :encoding :sse)
   ;; s16.8
   (s16.8-hadd    #:phaddw    (s16.8) (s16.8 s16.8) :cost 3 :encoding :sse)
   (s16.8-hsub    #:phsubw    (s16.8) (s16.8 s16.8) :cost 3 :encoding :sse)
   ;; s32.4
   (s32.4-abs     #:pabsd     (s32.4) (s32.4)       :cost 2)
   (s32.4-sign    #:psignd    (s32.4) (s32.4 s32.4) :cost 3 :encoding :sse)
   (s32.4-hadd    #:phaddd    (s32.4) (s32.4 s32.4) :cost 3 :encoding :sse)
   (s32.4-hsub    #:phsubd    (s32.4) (s32.4 s32.4) :cost 3 :encoding :sse)))

(in-package #:sb-simd-sse4.1)

(sb-simd::define-instruction-set #:sse4.1
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   ;; f32.4
   (f32.4-blend         #:blendps   (f32.4) (f32.4 f32.4 sb-simd::imm4) :cost 1 :encoding :sse)
   #+(or) ; The result of extractps is a float but must not reside in an XMM register.
   (f32.4-elt           #:extractps (f32)   (f32.4 sb-simd::imm2)       :cost 1)
   (f32.4-insert        #:insertps  (f32.4) (f32.4 f32.4 sb-simd::imm8) :cost 1 :encoding :sse)
   ;; f64.2
   (f64.2-blend         #:blendpd   (f64.2) (f64.2 f64.2 sb-simd::imm2) :cost 1 :encoding :sse)
   ;; u8.16
   (u8.16-elt           #:pextrb    (u8)    (u8.16 sb-simd::imm4)       :cost 1)
   (u8.16-insert        #:pinsrb    (u8.16) (u8.16 u8 sb-simd::imm4)    :cost 1 :encoding :sse)
   ;; u16.8
   (two-arg-u16.8-max   #:pmaxuw    (u16.8) (u16.8 u16.8)               :cost 2 :encoding :sse :commutative t)
   (two-arg-u16.8-min   #:pminuw    (u16.8) (u16.8 u16.8)               :cost 2 :encoding :sse :commutative t)
   (u16.8-blend         #:pblendw   (u16.8) (u16.8 u16.8 sb-simd::imm8) :cost 1 :encoding :sse)
   (u16.8-minpos        #:pminuw    (u16.8) (u16.8)                     :cost 5)
   ;; u32.4
   (two-arg-u32.4-max   #:pmaxud    (u32.4) (u32.4 u32.4)               :cost 2 :encoding :sse :commutative t)
   (two-arg-u32.4-min   #:pminud    (u32.4) (u32.4 u32.4)               :cost 2 :encoding :sse :commutative t)
   (u32.4-elt           #:pextrd    (u32)   (u32.4 sb-simd::imm2)       :cost 1)
   (u32.4-insert        #:pinsrd    (u32.4) (u32.4 u32 sb-simd::imm2)   :cost 1 :encoding :sse)
   ;; u64.2
   (two-arg-u64.2=      #:pcmpeqq   (u64.2) (u64.2 u64.2)               :cost 1 :encoding :sse :commutative t)
   (two-arg-u64.2/=     nil         (u64.2) (u64.2 u64.2)               :cost 2 :encoding :none :commutative t)
   (u64.2-elt           #:pextrq    (u64)   (u64.2 sb-simd::imm1)       :cost 1)
   #+(or) ; TODO: PINSRQ is currently missing in SBCL.
   (u64.2-insert        #:pinsrq    (u64.2) (u64.2 u64 sb-simd::imm1)   :cost 1 :encoding :sse)
   ;; s8.16
   (two-arg-s8.16-max   #:pmaxsb    (s8.16) (s8.16 s8.16)               :cost 2 :encoding :sse :commutative t)
   (two-arg-s8.16-min   #:pminsb    (s8.16) (s8.16 s8.16)               :cost 2 :encoding :sse :commutative t)
   (s8.16-elt           #:pextrb    (s8)    (s8.16 sb-simd::imm4)       :cost 1)
   (s8.16-insert        #:pinsrb    (s8.16) (s8.16 s8 sb-simd::imm4)    :cost 1 :encoding :sse)
   ;; s16.8
   (s16.8-from-u8.16    #:pmovsxbw  (s16.8) (u8.16)                     :cost 5)
   (s16.8-from-s8.16    #:pmovsxbw  (s16.8) (s8.16)                     :cost 5)
   (s16.8-pack          #:packusdw  (s16.8) (s32.4 s32.4)               :cost 1 :encoding :sse)
   (s16.8-blend         #:pblendw   (s16.8) (s16.8 s16.8 sb-simd::imm8) :cost 1 :encoding :sse)
   ;; s32.4
   (two-arg-s32.4-max   #:pmaxsd    (s32.4) (s32.4 s32.4)               :cost 2 :encoding :sse :commutative t)
   (two-arg-s32.4-min   #:pminsd    (s32.4) (s32.4 s32.4)               :cost 2 :encoding :sse :commutative t)
   (s32.4-from-u8.16    #:pmovsxbd  (s32.4) (u8.16)                     :cost 5)
   (s32.4-from-s8.16    #:pmovsxbd  (s32.4) (s8.16)                     :cost 5)
   (s32.4-from-u16.8    #:pmovsxwd  (s32.4) (u16.8)                     :cost 5)
   (s32.4-from-s16.8    #:pmovsxwd  (s32.4) (s16.8)                     :cost 5)
   (two-arg-s32.4-mullo #:pmulld    (s32.4) (s32.4 s32.4)               :cost 1 :encoding :sse :commutative t)
   (s32.4-elt           #:pextrd    (s32)   (s32.4 sb-simd::imm2)       :cost 1)
   (s32.4-insert        #:pinsrd    (s32.4) (s32.4 s32 sb-simd::imm2)   :cost 1 :encoding :sse)
   ;; s64.2
   (s64.2-from-u8.16    #:pmovsxbq  (s64.2) (u8.16)                     :cost 5)
   (s64.2-from-s8.16    #:pmovsxbq  (s64.2) (s8.16)                     :cost 5)
   (s64.2-from-u16.8    #:pmovsxwq  (s64.2) (u16.8)                     :cost 5)
   (s64.2-from-s16.8    #:pmovsxwq  (s64.2) (s16.8)                     :cost 5)
   (s64.2-from-u32.4    #:pmovsxdq  (s64.2) (u32.4)                     :cost 5)
   (s64.2-from-s32.4    #:pmovsxdq  (s64.2) (s32.4)                     :cost 5)
   (two-arg-s64.2-mul   #:pmuldq    (s64.2) (s64.2 s64.2)               :cost 2 :encoding :sse :commutative t)
   (two-arg-s64.2=      #:pcmpeqq   (s64.2) (s64.2 s64.2)               :cost 1 :encoding :sse :commutative t)
   (two-arg-s64.2/=     nil         (s64.2) (s64.2 s64.2)               :cost 2 :encoding :none :commutative t)
   (s64.2-elt           #:pextrq    (s64)   (s64.2 sb-simd::imm1)       :cost 1)
   #+(or) ; TODO: PINSRQ is currently missing in SBCL.
   (s64.2-insert        #:pinsrq    (s64.2) (s64.2 s64 sb-simd::imm1)   :cost 1 :encoding :sse)
  )
  (:loads
   (f32.4-ntload #:movntdqa f32.4 f32vec f32.4-non-temporal-aref f32.4-non-temporal-row-major-aref)
   (f64.2-ntload #:movntdqa f64.2 f64vec f64.2-non-temporal-aref f64.2-non-temporal-row-major-aref)
   ;; u16.8
   ;(u8.16-ntload #:movntdqa u8.16 u8vec  u8.16-non-temporal-aref u8.16-non-temporal-row-major-aref)
   (u16.8-ntload #:movntdqa u16.8 u16vec u16.8-non-temporal-aref u16.8-non-temporal-row-major-aref)
   ;; u32.4
   (u32.4-ntload #:movntdqa u32.4 u32vec u32.4-non-temporal-aref u32.4-non-temporal-row-major-aref)
   (u64.2-ntload #:movntdqa u64.2 u64vec u64.2-non-temporal-aref u64.2-non-temporal-row-major-aref)
   ;(s8.16-ntload #:movntdqa s8.16 s8vec  s8.16-non-temporal-aref s8.16-non-temporal-row-major-aref)
   ;; s16.8
   (s16.8-ntload #:movntdqa s16.8 s16vec s16.8-non-temporal-aref s16.8-non-temporal-row-major-aref)
   ;; s32.4
   (s32.4-ntload #:movntdqa s32.4 s32vec s32.4-non-temporal-aref s32.4-non-temporal-row-major-aref)
   (s64.2-ntload #:movntdqa s64.2 s64vec s64.2-non-temporal-aref s64.2-non-temporal-row-major-aref)))

(in-package #:sb-simd-sse4.2)

(sb-simd::define-instruction-set #:sse4.2
  (:test #+x86-64 t #-x86-64 nil)
  (:primitives
   (two-arg-u64.2>  #:pcmpgtq (u64.2) (u64.2 u64.2) :cost 3 :encoding :sse)
   (two-arg-u64.2>= nil       (u64.2) (u64.2 u64.2) :cost 4 :encoding :none)
   (two-arg-u64.2<  nil       (u64.2) (u64.2 u64.2) :cost 3 :encoding :none)
   (two-arg-u64.2<= nil       (u64.2) (u64.2 u64.2) :cost 4 :encoding :none)))

(in-package #:sb-simd-avx)

(sb-simd::define-instruction-set #:avx
  (:test #+x86-64 (plusp (sb-alien:extern-alien "avx_supported" sb-alien:int) #-x86-64 nil))
  (:primitives
   (vzeroupper          #:vzeroupper   ()      ()   :cost 1 :pure nil)
   (vzeroall            #:vzeroall     ()      ()   :cost 1 :pure nil)
   (f32!-from-p128      nil            (f32) (p128) :cost 1 :encoding :custom)
   (f64!-from-p128      nil            (f64) (p128) :cost 1 :encoding :custom)
   (u64!-from-p128      #:movq         (u64) (p128) :cost 1)
   (f32!-from-p256      nil            (f32) (p256) :cost 1 :encoding :custom)
   (f64!-from-p256      nil            (f64) (p256) :cost 1 :encoding :custom)
   (u64!-from-p256      #:movq         (u64) (p256) :cost 1)
   ;; f32.4
   (f32.4!-from-f32     nil            (f32.4) (f32)         :cost 1 :encoding :custom)
   (f32.4!-from-p128    #:vmovaps      (f32.4) (p128)        :cost 1 :encoding :move)
   (f32.4!-from-p256    nil            (f32.4) (p256)        :cost 1 :encoding :custom)
   (make-f32.4          nil            (f32.4) (f32 f32 f32 f32) :cost 1 :encoding :none)
   (f32.4-values        nil            (f32 f32 f32 f32) (f32.4) :cost 1 :encoding :none)
   (f32.4-broadcast     #:vbroadcastss (f32.4) (f32)         :cost 1)
   (f32.4-from-f64.4    #:vcvtpd2ps    (f32.4) (f64.4)       :cost 5) ;; wrong code is generated VCVTPD2PS XMM0, XMM0
   (two-arg-f32.4-and   #:vandps       (f32.4) (f32.4 f32.4) :cost 1 :commutative t)
   (two-arg-f32.4-or    #:vorps        (f32.4) (f32.4 f32.4) :cost 1 :commutative t)
   (two-arg-f32.4-xor   #:vxorps       (f32.4) (f32.4 f32.4) :cost 1 :commutative t)
   (two-arg-f32.4-max   #:vmaxps       (f32.4) (f32.4 f32.4) :cost 3 :commutative t)
   (two-arg-f32.4-min   #:vminps       (f32.4) (f32.4 f32.4) :cost 3 :commutative t)
   (f32.4-andnot        #:vandnps      (f32.4) (f32.4 f32.4) :cost 1)
   (f32.4-not           nil            (f32.4) (f32.4)       :cost 1 :encoding :none)
   (two-arg-f32.4+      #:vaddps       (f32.4) (f32.4 f32.4) :cost 2 :commutative t)
   (two-arg-f32.4-      #:vsubps       (f32.4) (f32.4 f32.4) :cost 2)
   (two-arg-f32.4*      #:vmulps       (f32.4) (f32.4 f32.4) :cost 2 :commutative t)
   (two-arg-f32.4/      #:vdivps       (f32.4) (f32.4 f32.4) :cost 8)
   (two-arg-f32.4=      #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :eq :commutative t)
   (two-arg-f32.4/=     #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :neq :commutative t)
   (two-arg-f32.4<      #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :lt)
   (two-arg-f32.4<=     #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :le)
   (two-arg-f32.4>      #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :gt)
   (two-arg-f32.4>=     #:vcmpps       (u32.4) (f32.4 f32.4) :cost 4 :prefix :ge)
   (f32.4-addsub        #:vaddsubps    (f32.4) (f32.4 f32.4) :cost 3)
   (f32.4-hadd          #:vhaddps      (f32.4) (f32.4 f32.4) :cost 6)
   (f32.4-hsub          #:vhsubps      (f32.4) (f32.4 f32.4) :cost 6)
   (f32.4-reciprocal    #:vrcpps       (f32.4) (f32.4)       :cost 5)
   (f32.4-rsqrt         #:vrsqrtps     (f32.4) (f32.4)       :cost 5)
   (f32.4-sqrt          #:vsqrtps      (f32.4) (f32.4)       :cost 15)
   (f32.4-unpackhi      #:vunpckhps    (f32.4) (f32.4 f32.4) :cost 1)
   (f32.4-unpacklo      #:vunpcklps    (f32.4) (f32.4 f32.4) :cost 1)
   (f32.4-ceiling       #:vroundps     (f32.4) (f32.4 sb-simd::imm3)       :cost 2)
   (f32.4-blend         #:vblendps     (f32.4) (f32.4 f32.4 sb-simd::imm4) :cost 1)
   (f32.4-permute       #:vpermilps    (f32.4) (f32.4 sb-simd::imm8) :cost 1)
   (f32.4-shuffle       #:vshufps      (f32.4) (f32.4 f32.4 sb-simd::imm8) :cost 1)
   ;; f64.2
   (f64.2!-from-f64     nil            (f64.2) (f64)         :cost 1 :encoding :custom)
   (f64.2!-from-p128    #:vmovapd      (f64.2) (p128)        :cost 1 :encoding :move)
   (f64.2!-from-p256    nil            (f64.2) (p256)        :cost 1 :encoding :custom)
   (make-f64.2          nil            (f64.2) (f64 f64)     :cost 1 :encoding :none)
   (f64.2-values        nil            (f64 f64) (f64.2)     :cost 1 :encoding :none)
   (f64.2-broadcast     #:vmovddup     (f64.2) (f64)         :cost 1)
   (two-arg-f64.2-and   #:vandpd       (f64.2) (f64.2 f64.2) :cost 1 :commutative t)
   (two-arg-f64.2-or    #:vorpd        (f64.2) (f64.2 f64.2) :cost 1 :commutative t)
   (two-arg-f64.2-xor   #:vxorpd       (f64.2) (f64.2 f64.2) :cost 1 :commutative t)
   (two-arg-f64.2-max   #:vmaxpd       (f64.2) (f64.2 f64.2) :cost 3 :commutative t)
   (two-arg-f64.2-min   #:vminpd       (f64.2) (f64.2 f64.2) :cost 3 :commutative t)
   (two-arg-f64.2+      #:vaddpd       (f64.2) (f64.2 f64.2) :cost 2 :commutative t)
   (f64.2-andnot        #:vandnpd      (f64.2) (f64.2 f64.2) :cost 1)
   (f64.2-not           nil            (f64.2) (f64.2)       :cost 1 :encoding :none)
   (two-arg-f64.2-      #:vsubpd       (f64.2) (f64.2 f64.2) :cost 2)
   (two-arg-f64.2*      #:vmulpd       (f64.2) (f64.2 f64.2) :cost 2 :commutative t)
   (two-arg-f64.2/      #:vdivpd       (f64.2) (f64.2 f64.2) :cost 8)
   (two-arg-f64.2=      #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :eq :commutative t)
   (two-arg-f64.2/=     #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :neq :commutative t)
   (two-arg-f64.2<      #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :lt)
   (two-arg-f64.2<=     #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :le)
   (two-arg-f64.2>      #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :gt)
   (two-arg-f64.2>=     #:vcmppd       (u64.2) (f64.2 f64.2) :cost 4 :prefix :ge)
   (f64.2-addsub        #:vaddsubpd    (f64.2) (f64.2 f64.2) :cost 3)
   (f64.2-hadd          #:vhaddpd      (f64.2) (f64.2 f64.2) :cost 6)
   (f64.2-hsub          #:vhsubpd      (f64.2) (f64.2 f64.2) :cost 6)
   (f64.2-sqrt          #:vsqrtpd      (f64.2) (f64.2)       :cost 20)
   (f64.2-unpackhi      #:vunpckhpd    (f64.2) (f64.2 f64.2) :cost 1)
   (f64.2-unpacklo      #:vunpcklpd    (f64.2) (f64.2 f64.2) :cost 1)
   (f64.2-ceiling       #:vroundpd     (f64.2) (f64.2 sb-simd::imm3)       :cost 2)
   (f64.2-blend         #:vblendpd     (f64.2) (f64.2 f64.2 sb-simd::imm4) :cost 1)
   (f64.2-permute       #:vpermilpd    (f64.2) (f64.2 sb-simd::imm2) :cost 1)
   (f64.2-shuffle       #:vshufpd      (f64.2) (f64.2 f64.2 sb-simd::imm1) :cost 1)
   ;; f32.8
   (f32.8!-from-f32     nil            (f32.8) (f32)        :cost 1 :encoding :custom)
   (f32.8!-from-p128    #:vmovaps      (f32.8) (p128)       :cost 1 :encoding :move)
   (f32.8!-from-p256    #:vmovaps      (f32.8) (p256)       :cost 1 :encoding :move)
   (make-f32.8          nil            (f32.8) (f32 f32 f32 f32 f32 f32 f32 f32) :cost 1 :encoding :none)
   (f32.8-values        nil            (f32 f32 f32 f32 f32 f32 f32 f32) (f32.8) :cost 1 :encoding :none)
   (f32.8-broadcast     #:vbroadcastss (f32.8) (f32)         :cost 1)
   (f32.8-from-u32.8    #:vcvtdq2ps    (f32.8) (u32.8)       :cost 5)
   (two-arg-f32.8-and   #:vandps       (f32.8) (f32.8 f32.8) :cost 1 :commutative t)
   (two-arg-f32.8-or    #:vorps        (f32.8) (f32.8 f32.8) :cost 1 :commutative t)
   (two-arg-f32.8-xor   #:vxorps       (f32.8) (f32.8 f32.8) :cost 1 :commutative t)
   (two-arg-f32.8-max   #:vmaxps       (f32.8) (f32.8 f32.8) :cost 3 :commutative t)
   (two-arg-f32.8-min   #:vminps       (f32.8) (f32.8 f32.8) :cost 3 :commutative t)
   (f32.8-andnot        #:vandnps      (f32.8) (f32.8 f32.8) :cost 1)
   (f32.8-not           nil            (f32.8) (f32.8)       :cost 1 :encoding :none)
   (two-arg-f32.8+      #:vaddps       (f32.8) (f32.8 f32.8) :cost 2 :commutative t)
   (two-arg-f32.8-      #:vsubps       (f32.8) (f32.8 f32.8) :cost 2)
   (two-arg-f32.8*      #:vmulps       (f32.8) (f32.8 f32.8) :cost 2 :commutative t)
   (two-arg-f32.8/      #:vdivps       (f32.8) (f32.8 f32.8) :cost 8)
   (two-arg-f32.8=      #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :eq :commutative t)
   (two-arg-f32.8/=     #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :neq :commutative t)
   (two-arg-f32.8<      #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :lt)
   (two-arg-f32.8<=     #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :le)
   (two-arg-f32.8>      #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :gt)
   (two-arg-f32.8>=     #:vcmpps       (u32.8) (f32.8 f32.8) :cost 4 :prefix :ge)
   (f32.8-dupeven       #:vmovsldup    (f32.8) (f32.8)       :cost 1)
   (f32.8-dupodd        #:vmovshdup    (f32.8) (f32.8)       :cost 1)
   (f32.8-hadd          #:vhaddps      (f32.8) (f32.8 f32.8) :cost 6)
   (f32.8-hsub          #:vhsubps      (f32.8) (f32.8 f32.8) :cost 6)
   (f32.8-reciprocal    #:vrcpps       (f32.8) (f32.8)       :cost 5)
   (f32.8-rsqrt         #:vrsqrtps     (f32.8) (f32.8)       :cost 5)
   (f32.8-sqrt          #:vsqrtps      (f32.8) (f32.8)       :cost 15)
   (f32.8-unpackhi      #:vunpckhps    (f32.8) (f32.8 f32.8) :cost 1)
   (f32.8-unpacklo      #:vunpcklps    (f32.8) (f32.8 f32.8) :cost 1)
   (f32.8-ceiling       #:vroundps     (f32.8) (f32.8 sb-simd::imm3)       :cost 2)
   (f32.8-blend         #:vblendps     (f32.8) (f32.8 f32.8 sb-simd::imm8) :cost 1)
   (f32.8-permute       #:vpermilps    (f32.8) (f32.8 sb-simd::imm8) :cost 1)
   (f32.8-permute128    #:vperm2f128   (f32.8) (f32.8 f32.8 sb-simd::imm8) :cost 1)
   (f32.8-shuffle       #:vshufps      (f32.8) (f32.8 f32.8 sb-simd::imm8) :cost 1)
   (f32.8-extract128    #:vextractf128 (f32.4) (f32.8 sb-simd::imm1) :cost 1)
   (f32.8-insert128     #:vinsertf128  (f32.8) (f32.8 f32.4 sb-simd::imm1) :cost 1)
   (f32.8-round         #:vroundps     (f32.8) (f32.8 sb-simd::imm3) :cost 2)
   ;; f64.4
   (f64.4!-from-f64     nil            (f64.4) (f64)         :cost 1 :encoding :custom)
   (f64.4!-from-p128    #:vmovapd      (f64.4) (p128)        :cost 1 :encoding :move)
   (f64.4!-from-p256    #:vmovapd      (f64.4) (p256)        :cost 1 :encoding :move)
   (make-f64.4          nil            (f64.4) (f64 f64 f64 f64) :cost 1 :encoding :none)
   (f64.4-values        nil            (f64 f64 f64 f64) (f64.4) :cost 1 :encoding :none)
   (f64.4-broadcast     #:vbroadcastsd (f64.4) (f64)         :cost 1)
   (f64.4-from-f32.4    #:vcvtps2pd    (f64.4) (f32.4)       :cost 5)
   (f64.4-from-u32.4    #:vcvtdq2pd    (f64.4) (u32.4)       :cost 5)
   (f64.4-from-s32.4    #:vcvtdq2pd    (f64.4) (s32.4)       :cost 5)
   (two-arg-f64.4-and   #:vandpd       (f64.4) (f64.4 f64.4) :cost 1 :commutative t)
   (two-arg-f64.4-or    #:vorpd        (f64.4) (f64.4 f64.4) :cost 1 :commutative t)
   (two-arg-f64.4-xor   #:vxorpd       (f64.4) (f64.4 f64.4) :cost 1 :commutative t)
   (two-arg-f64.4-max   #:vmaxpd       (f64.4) (f64.4 f64.4) :cost 3 :commutative t)
   (two-arg-f64.4-min   #:vminpd       (f64.4) (f64.4 f64.4) :cost 3 :commutative t)
   (two-arg-f64.4+      #:vaddpd       (f64.4) (f64.4 f64.4) :cost 2 :commutative t)
   (two-arg-f64.4-      #:vsubpd       (f64.4) (f64.4 f64.4) :cost 2)
   (two-arg-f64.4*      #:vmulpd       (f64.4) (f64.4 f64.4) :cost 2 :commutative t)
   (two-arg-f64.4/      #:vdivpd       (f64.4) (f64.4 f64.4) :cost 8)
   (two-arg-f64.4=      #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :eq :commutative t)
   (two-arg-f64.4/=     #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :neq :commutative t)
   (two-arg-f64.4<      #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :lt)
   (two-arg-f64.4<=     #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :le)
   (two-arg-f64.4>      #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :gt)
   (two-arg-f64.4>=     #:vcmppd       (u64.4) (f64.4 f64.4) :cost 4 :prefix :ge)
   (f64.4-andnot        #:vandnpd      (f64.4) (f64.4 f64.4) :cost 1)
   (f64.4-not           nil            (f64.4) (f64.4)       :cost 1 :encoding :none)
   (f64.4-dupeven       #:vmovddup     (f64.4) (f64.4)       :cost 1)
   (f64.4-hadd          #:vhaddpd      (f64.4) (f64.4 f64.4) :cost 6)
   (f64.4-hsub          #:vhsubpd      (f64.4) (f64.4 f64.4) :cost 6)
   (f64.4-sqrt          #:vsqrtpd      (f64.4) (f64.4)       :cost 20)
   (f64.4-unpackhi      #:vunpckhpd    (f64.4) (f64.4 f64.4) :cost 1)
   (f64.4-unpacklo      #:vunpcklpd    (f64.4) (f64.4 f64.4) :cost 1)
   (f64.4-ceiling       #:vroundpd     (f64.4) (f64.4 sb-simd::imm3)       :cost 2)
   (f64.4-blend         #:vblendpd     (f64.4) (f64.4 f64.4 sb-simd::imm4) :cost 1)
   (f64.4-permute       #:vpermilpd    (f64.4) (f64.4 sb-simd::imm4) :cost 1)
   (f64.4-permute128    #:vperm2f128   (f64.4) (f64.4 f64.4 sb-simd::imm8) :cost 1)
   (f64.4-shuffle       #:vshufpd      (f64.4) (f64.4 f64.4 sb-simd::imm2) :cost 1)
   (f64.4-hsum          nil            (f64)   (f64.4)       :cost 4 :encoding :none)
   (f64.4-reverse       #:vpermilpd    (f64.4) (f64.4)       :cost 2 :encoding :none)
   (f64.4-extract128    #:vextractf128 (f64.2) (f64.4 sb-simd::imm1) :cost 1)
   (f64.4-insert128     #:vinsertf128  (f64.4) (f64.4 f64.2 sb-simd::imm1) :cost 1)
   (f64.4-set128        #:vinsertf128  (f64.4) (f64.2 f64.2 sb-simd::imm1) :cost 1)
   (f64.4-round         #:vroundpd     (f64.4) (f64.4 sb-simd::imm3) :cost 2)
   ;; u8.16
   (u8.16!-from-u8      #:movq         (u8.16) (u8)          :cost 1)
   (u8.16!-from-p128    #:vmovdqa      (u8.16) (p128)        :cost 1 :encoding :move)
   (u8.16!-from-p256    nil            (u8.16) (p256)        :cost 1 :encoding :custom)
   (make-u8.16          nil            (u8.16) (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) :cost 1 :encoding :none)
   (u8.16-values        nil            (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) (u8.16) :cost 1 :encoding :none)
   (u8.16-broadcast     nil            (u8.16) (u8)          :cost 1 :encoding :none)
   (two-arg-u8.16-and   #:vpand        (u8.16) (u8.16 u8.16) :cost 1 :commutative t)
   (two-arg-u8.16-or    #:vpor         (u8.16) (u8.16 u8.16) :cost 1 :commutative t)
   (two-arg-u8.16-xor   #:vpxor        (u8.16) (u8.16 u8.16) :cost 1 :commutative t)
   (u8.16-andnot        #:vpandn       (u8.16) (u8.16 u8.16) :cost 1)
   (u8.16-not           nil            (u8.16) (u8.16)       :cost 1 :encoding :none)
   (two-arg-u8.16+      #:vpaddw       (u8.16) (u8.16 u8.16) :cost 2 :commutative t)
   (two-arg-u8.16-      #:vpsubw       (u8.16) (u8.16 u8.16) :cost 2)
   (two-arg-u8.16=      #:vpcmpeqw     (u8.16) (u8.16 u8.16) :cost 1 :commutative t)
   (two-arg-u8.16/=     nil            (u8.16) (u8.16 u8.16) :cost 2 :commutative t :encoding :none)
   (two-arg-u8.16>      #:vpcmpgtw     (u8.16) (u8.16 u8.16) :cost 1)
   (two-arg-u8.16<      nil            (u8.16) (u8.16 u8.16) :cost 1 :encoding :none)
   (two-arg-u8.16>=     nil            (u8.16) (u8.16 u8.16) :cost 2 :encoding :none)
   (two-arg-u8.16<=     nil            (u8.16) (u8.16 u8.16) :cost 2 :encoding :none)
   (u8.16-unpackhi      #:vpunpckhbw   (u8.16) (u8.16 u8.16) :cost 1)
   (u8.16-unpacklo      #:vpunpcklbw   (u8.16) (u8.16 u8.16) :cost 1)
   (u8.16-shuffle       #:vpshufb      (u8.16) (u8.16 u8.16) :cost 1) ;; TODO missing imm
   ;; u16.8
   (u16.8!-from-u16     #:movq         (u16.8) (u16)         :cost 1)
   (u16.8!-from-p128    #:vmovdqa      (u16.8) (p128)        :cost 1 :encoding :move)
   (u16.8!-from-p256    nil            (u16.8) (p256)        :cost 1 :encoding :custom)
   (make-u16.8          nil            (u16.8) (u16 u16 u16 u16 u16 u16 u16 u16) :cost 1 :encoding :none)
   (u16.8-values        nil            (u16 u16 u16 u16 u16 u16 u16 u16) (u16.8) :cost 1 :encoding :none)
   (u16.8-broadcast     nil            (u16.8) (u16)         :cost 1 :encoding :none)
   (two-arg-u16.8-and   #:vpand        (u16.8) (u16.8 u16.8) :cost 1 :commutative t)
   (two-arg-u16.8-or    #:vpor         (u16.8) (u16.8 u16.8) :cost 1 :commutative t)
   (two-arg-u16.8-xor   #:vpxor        (u16.8) (u16.8 u16.8) :cost 1 :commutative t)
   (u16.8-andnot        #:vpandn       (u16.8) (u16.8 u16.8) :cost 1)
   (u16.8-not           nil            (u16.8) (u16.8)       :cost 1 :encoding :none)
   (two-arg-u16.8+      #:vpaddw       (u16.8) (u16.8 u16.8) :cost 2 :commutative t)
   (two-arg-u16.8-      #:vpsubw       (u16.8) (u16.8 u16.8) :cost 2)
   (two-arg-u16.8=      #:vpcmpeqw     (u16.8) (u16.8 u16.8) :cost 1 :commutative t)
   (two-arg-u16.8/=     nil            (u16.8) (u16.8 u16.8) :cost 2 :commutative t :encoding :none)
   (two-arg-u16.8>      #:vpcmpgtw     (u16.8) (u16.8 u16.8) :cost 1)
   (two-arg-u16.8<      nil            (u16.8) (u16.8 u16.8) :cost 1 :encoding :none)
   (two-arg-u16.8>=     nil            (u16.8) (u16.8 u16.8) :cost 2 :encoding :none)
   (two-arg-u16.8<=     nil            (u16.8) (u16.8 u16.8) :cost 2 :encoding :none)
   (u16.8-shiftl        #:vpsllw       (u16.8) (u16.8 u16.8) :cost 1)
   (u16.8-shiftr        #:vpsrlw       (u16.8) (u16.8 u16.8) :cost 1)
   (u16.8-unpackhi      #:vpunpckhwd   (u16.8) (u16.8 u16.8) :cost 1)
   (u16.8-unpacklo      #:vpunpcklwd   (u16.8) (u16.8 u16.8) :cost 1)
   (u16.8-shufflehi     #:vpshufhw     (u16.8) (u16.8 sb-simd::imm8) :cost 1)
   (u16.8-shufflelo     #:vpshuflw     (u16.8) (u16.8 sb-simd::imm8) :cost 1)
   ;; u32.4
   (u32.4!-from-u32     #:movq         (u32.4) (u32)         :cost 1)
   (u32.4!-from-p128    #:vmovdqa      (u32.4) (p128)        :cost 1 :encoding :move)
   (u32.4!-from-p256    nil            (u32.4) (p256)        :cost 1 :encoding :custom)
   (make-u32.4          nil            (u32.4) (u32 u32 u32 u32) :cost 1 :encoding :none)
   (u32.4-values        nil            (u32 u32 u32 u32) (u32.4) :cost 1 :encoding :none)
   (u32.4-broadcast     nil            (u32.4) (u32)         :cost 1 :encoding :none)
   (two-arg-u32.4-and   #:vpand        (u32.4) (u32.4 u32.4) :cost 1 :commutative t)
   (two-arg-u32.4-or    #:vpor         (u32.4) (u32.4 u32.4) :cost 1 :commutative t)
   (two-arg-u32.4-xor   #:vpxor        (u32.4) (u32.4 u32.4) :cost 1 :commutative t)
   (u32.4-andnot        #:vpandn       (u32.4) (u32.4 u32.4) :cost 1)
   (u32.4-not           nil            (u32.4) (u32.4)       :cost 1 :encoding :none)
   (two-arg-u32.4+      #:vpaddd       (u32.4) (u32.4 u32.4) :cost 2 :commutative t)
   (two-arg-u32.4-      #:vpsubd       (u32.4) (u32.4 u32.4) :cost 2)
   (two-arg-u32.4=      #:vpcmpeqd     (u32.4) (u32.4 u32.4) :cost 1 :commutative t)
   (two-arg-u32.4/=     nil            (u32.4) (u32.4 u32.4) :cost 2 :commutative t :encoding :none)
   (two-arg-u32.4>      #:vpcmpgtd     (u32.4) (u32.4 u32.4) :cost 1)
   (two-arg-u32.4<      nil            (u32.4) (u32.4 u32.4) :cost 1 :encoding :none)
   (two-arg-u32.4>=     nil            (u32.4) (u32.4 u32.4) :cost 2 :encoding :none)
   (two-arg-u32.4<=     nil            (u32.4) (u32.4 u32.4) :cost 2 :encoding :none)
   (u32.4-unpackhi      #:vpunpckhdq   (u32.4) (u32.4 u32.4) :cost 1)
   (u32.4-unpacklo      #:vpunpckldq   (u32.4) (u32.4 u32.4) :cost 1)
   (u32.4-blend         #:vblendps     (u32.4) (u32.4 u32.4 sb-simd::imm4) :cost 1)
   (u32.4-permute       #:vpermilps    (u32.4) (u32.4 sb-simd::imm8) :cost 1)
   ;; u64.2
   (u64.2!-from-u64     #:movq         (u64.2) (u64)         :cost 1)
   (u64.2!-from-p128    #:vmovdqa      (u64.2) (p128)        :cost 1 :encoding :move)
   (u64.2!-from-p256    nil            (u64.2) (p256)        :cost 1 :encoding :custom)
   (make-u64.2          nil            (u64.2) (u64 u64)     :cost 1 :encoding :none)
   (u64.2-values        nil            (u64 u64) (u64.2)     :cost 1 :encoding :none)
   (u64.2-broadcast     nil            (u64.2) (u64)         :cost 1 :encoding :none)
   (u64.2-from-u64      #:movq         (u64.2) (u64)         :cost 1)
   (two-arg-u64.2-and   #:vpand        (u64.2) (u64.2 u64.2) :cost 1 :commutative t)
   (two-arg-u64.2-or    #:vpor         (u64.2) (u64.2 u64.2) :cost 1 :commutative t)
   (two-arg-u64.2-xor   #:vpxor        (u64.2) (u64.2 u64.2) :cost 1 :commutative t)
   (u64.2-andnot        #:vpandn       (u64.2) (u64.2 u64.2) :cost 1)
   (u64.2-not           nil            (u64.2) (u64.2)       :cost 1 :encoding :none)
   (two-arg-u64.2+      #:vpaddq       (u64.2) (u64.2 u64.2) :cost 2 :commutative t)
   (two-arg-u64.2-      #:vpsubq       (u64.2) (u64.2 u64.2) :cost 2)
   (two-arg-u64.2=      #:vpcmpeqq     (u64.2) (u64.2 u64.2) :cost 1 :commutative t)
   (two-arg-u64.2/=     nil            (u64.2) (u64.2 u64.2) :cost 2 :commutative t :encoding :none)
   (two-arg-u64.2>      #:vpcmpgtq     (u64.2) (u64.2 u64.2) :cost 1)
   (two-arg-u64.2<      nil            (u64.2) (u64.2 u64.2) :cost 1 :encoding :none)
   (two-arg-u64.2>=     nil            (u64.2) (u64.2 u64.2) :cost 2 :encoding :none)
   (two-arg-u64.2<=     nil            (u64.2) (u64.2 u64.2) :cost 2 :encoding :none)
   (u64.2-unpackhi      #:vpunpckhqdq  (u64.2) (u64.2 u64.2) :cost 1)
   (u64.2-unpacklo      #:vpunpcklqdq  (u64.2) (u64.2 u64.2) :cost 1)
   (u64.2-blend         #:vblendpd     (u64.2) (u64.2 u64.2 sb-simd::imm4) :cost 1)
   (u64.2-permute       #:vpermilpd    (u64.2) (u64.2 sb-simd::imm8) :cost 1)
   ;; u8.32
   (u8.32!-from-u8      #:movq         (u8.32) (u8) :cost 1)
   (u8.32!-from-p128    #:vmovdqa      (u8.32) (p128) :cost 1 :encoding :move)
   (u8.32!-from-p256    #:vmovdqa      (u8.32) (p256) :cost 1 :encoding :move)
   (make-u8.32          nil            (u8.32) (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) :cost 1 :encoding :none)
   (u8.32-values        nil            (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) (u8.32) :cost 1 :encoding :none)
   (u8.32-broadcast     nil            (u8.32) (u8) :cost 1 :encoding :none)
   (u8.32-extract128    #:vextractf128 (u8.16) (u8.32 sb-simd::imm1) :cost 1)
   (u8.32-insert128     #:vinsertf128  (u8.32) (u8.32 u8.16 sb-simd::imm1) :cost 1)
   ;; u16.16
   (u16.16!-from-u16    #:movq         (u16.16) (u16) :cost 1)
   (u16.16!-from-p128   #:vmovdqa      (u16.16) (p128) :cost 1 :encoding :move)
   (u16.16!-from-p256   #:vmovdqa      (u16.16) (p256) :cost 1 :encoding :move)
   (make-u16.16         nil            (u16.16) (u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16) :cost 1 :encoding :none)
   (u16.16-values       nil            (u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16) (u16.16) :cost 1 :encoding :none)
   (u16.16-broadcast    nil            (u16.16) (u16) :cost 1 :encoding :none)
   (u16.16-extract128   #:vextractf128 (u16.8)  (u16.16 sb-simd::imm1) :cost 1)
   (u16.16-insert128    #:vinsertf128  (u16.16) (u16.16 u16.8 sb-simd::imm1) :cost 1)
   ;; u32.8
   (u32.8!-from-u32     #:movq         (u32.8) (u32) :cost 1)
   (u32.8!-from-p128    #:vmovdqa      (u32.8) (p128) :cost 1 :encoding :move)
   (u32.8!-from-p256    #:vmovdqa      (u32.8) (p256) :cost 1 :encoding :move)
   (make-u32.8          nil            (u32.8) (u32 u32 u32 u32 u32 u32 u32 u32) :cost 1 :encoding :none)
   (u32.8-values        nil            (u32 u32 u32 u32 u32 u32 u32 u32) (u32.8) :cost 1 :encoding :none)
   (u32.8-broadcast     nil            (u32.8) (u32) :cost 1 :encoding :none)
   (u32.8-blend         #:vblendps     (u32.8) (u32.4 u32.4 sb-simd::imm8) :cost 1)
   (u32.8-permute       #:vpermilps    (u32.8) (u32.4 sb-simd::imm8) :cost 1)
   (u32.8-extract128    #:vextractf128 (u32.4) (u32.8 sb-simd::imm1) :cost 1)
   (u32.8-insert128     #:vinsertf128  (u32.8) (u32.8 u32.4 sb-simd::imm1) :cost 1)
   ;; u64.4
   (u64.4!-from-u64     #:movq         (u64.4) (u64) :cost 1)
   (u64.4!-from-p128    #:vmovdqa      (u64.4) (p128) :cost 1 :encoding :move)
   (u64.4!-from-p256    #:vmovdqa      (u64.4) (p256) :cost 1 :encoding :move)
   (make-u64.4          nil            (u64.4) (u64 u64 u64 u64) :cost 1 :encoding :none)
   (u64.4-values        nil            (u64 u64 u64 u64) (u64.4) :cost 1 :encoding :none)
   (u64.4-broadcast     nil            (u64.4) (u64) :cost 1 :encoding :none)
   (u64.4-blend         #:vblendpd     (u64.4) (u64.4 u64.4 sb-simd::imm4) :cost 1)
   (u64.4-permute       #:vpermilpd    (u64.4) (u64.4 sb-simd::imm8) :cost 1)
   (u64.4-extract128    #:vextractf128 (u64.2) (u64.4 sb-simd::imm1) :cost 1)
   (u64.4-insert128     #:vinsertf128  (u64.4) (u64.4 u64.2 sb-simd::imm1) :cost 1)
   ;; s8.16
   (s8.16!-from-s8      nil            (s8.16) (s8)          :cost 1 :encoding :none)
   (s8.16!-from-p128    #:vmovdqa      (s8.16) (p128)        :cost 1 :encoding :move)
   (s8.16!-from-p256    nil            (s8.16) (p256)        :cost 1 :encoding :custom)
   (make-s8.16          nil            (s8.16) (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) :cost 1 :encoding :none)
   (s8.16-values        nil            (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) (s8.16) :cost 1 :encoding :none)
   (s8.16-broadcast     nil            (s8.16)    (s8)       :cost 1 :encoding :none)
   (two-arg-s8.16-and   #:vpand        (s8.16) (s8.16 s8.16) :cost 1 :commutative t)
   (two-arg-s8.16-or    #:vpor         (s8.16) (s8.16 s8.16) :cost 1 :commutative t)
   (two-arg-s8.16-xor   #:vpxor        (s8.16) (s8.16 s8.16) :cost 1 :commutative t)
   (s8.16-andnot        #:vpandn       (s8.16) (s8.16 s8.16) :cost 1)
   (s8.16-not           nil            (s8.16) (s8.16)       :cost 1 :encoding :none)
   (two-arg-s8.16+      #:vpaddw       (s8.16) (s8.16 s8.16) :cost 2 :commutative t)
   (two-arg-s8.16-      #:vpsubw       (s8.16) (s8.16 s8.16) :cost 2)
   (two-arg-s8.16=      #:vpcmpeqw     (u8.16) (s8.16 s8.16) :cost 1 :commutative t)
   (two-arg-s8.16/=     nil            (u8.16) (s8.16 s8.16) :cost 2 :commutative t :encoding :none)
   (two-arg-s8.16>      #:vpcmpgtw     (u8.16) (s8.16 s8.16) :cost 1)
   (two-arg-s8.16<      nil            (u8.16) (s8.16 s8.16) :cost 1 :encoding :none)
   (two-arg-s8.16>=     nil            (u8.16) (s8.16 s8.16) :cost 2 :encoding :none)
   (two-arg-s8.16<=     nil            (u8.16) (s8.16 s8.16) :cost 2 :encoding :none)
   (s8.16-unpackhi      #:vpunpckhbw   (s8.16) (s8.16 s8.16) :cost 1)
   (s8.16-unpacklo      #:vpunpcklbw   (s8.16) (s8.16 s8.16) :cost 1)
   (s8.16-shuffle       #:vpshufb      (s8.16) (s8.16 u8.16) :cost 1)
   ;; s16.8
   (s16.8!-from-s16     nil            (s16.8) (s16)         :cost 1 :encoding :none)
   (s16.8!-from-p128    #:vmovdqa      (s16.8) (p128)        :cost 1 :encoding :move)
   (s16.8!-from-p256    nil            (s16.8) (p256)        :cost 1 :encoding :custom)
   (make-s16.8          nil            (s16.8) (s16 s16 s16 s16 s16 s16 s16 s16) :cost 1 :encoding :none)
   (s16.8-values        nil            (s16 s16 s16 s16 s16 s16 s16 s16) (s16.8) :cost 1 :encoding :none)
   (s16.8-broadcast     nil            (s16.8) (s16)         :cost 1 :encoding :none)
   (two-arg-s16.8-and   #:vpand        (s16.8) (s16.8 s16.8) :cost 1 :commutative t)
   (two-arg-s16.8-or    #:vpor         (s16.8) (s16.8 s16.8) :cost 1 :commutative t)
   (two-arg-s16.8-xor   #:vpxor        (s16.8) (s16.8 s16.8) :cost 1 :commutative t)
   (s16.8-andnot        #:vpandn       (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-not           nil            (s16.8) (s16.8)       :cost 1 :encoding :none)
   (two-arg-s16.8+      #:vpaddw       (s16.8) (s16.8 s16.8) :cost 2 :commutative t)
   (two-arg-s16.8-      #:vpsubw       (s16.8) (s16.8 s16.8) :cost 2)
   (two-arg-s16.8-mullo #:vpmullw      (s16.8) (s16.8 s16.8) :cost 2 :commutative t)
   (s16.8-shiftl        #:vpsllq       (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-shiftr        #:vpsrlq       (s16.8) (s16.8 s16.8) :cost 1)
   (two-arg-s16.8=      #:vpcmpeqw     (u16.8) (s16.8 s16.8) :cost 1 :commutative t)
   (two-arg-s16.8/=     nil            (u16.8) (s16.8 s16.8) :cost 2 :commutative t :encoding :none)
   (two-arg-s16.8>      #:vpcmpgtw     (u16.8) (s16.8 s16.8) :cost 1)
   (two-arg-s16.8<      nil            (u16.8) (s16.8 s16.8) :cost 1 :encoding :none)
   (two-arg-s16.8>=     nil            (u16.8) (s16.8 s16.8) :cost 2 :encoding :none)
   (two-arg-s16.8<=     nil            (u16.8) (s16.8 s16.8) :cost 2 :encoding :none)
   (s16.8-shiftl        #:vpsllw       (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-shiftr        #:vpsrlw       (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-unpackhi      #:vpunpckhwd   (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-unpacklo      #:vpunpcklwd   (s16.8) (s16.8 s16.8) :cost 1)
   (s16.8-shufflehi     #:vpshufhw     (s16.8) (s16.8 sb-simd::imm8) :cost 1)
   (s16.8-shufflelo     #:vpshuflw     (s16.8) (s16.8 sb-simd::imm8) :cost 1)
   (two-arg-s16.8-mullo #:vpmullw      (s16.8) (s16.8 s16.8) :cost 2 :commutative t)
   ;; s32.4
   (s32.4!-from-s32     nil            (s32.4) (s32)         :cost 1 :encoding :none)
   (s32.4!-from-p128    #:vmovdqa      (s32.4) (p128)        :cost 1 :encoding :move)
   (s32.4!-from-p256    nil            (s32.4) (p256)        :cost 1 :encoding :custom)
   (make-s32.4          nil            (s32.4) (s32 s32 s32 s32) :cost 1 :encoding :none)
   (s32.4-values        nil            (s32 s32 s32 s32) (s32.4) :cost 1 :encoding :none)
   (s32.4-broadcast     nil            (s32.4) (s32)         :cost 1 :encoding :none)
   (s32.4-from-f64.4    #:vcvtpd2dq    (s32.4) (f64.4)       :cost 5) ;; wrong code is generated VCVTPD2DQ XMM0, XMM0. 3rd and 4th elements are 0s
   (s32.4-from-f32.4    #:vcvtps2dq    (s32.4) (f32.4)       :cost 5)
   (two-arg-s32.4-and   #:vpand        (s32.4) (s32.4 s32.4) :cost 1 :commutative t)
   (two-arg-s32.4-or    #:vpor         (s32.4) (s32.4 s32.4) :cost 1 :commutative t)
   (two-arg-s32.4-xor   #:vpxor        (s32.4) (s32.4 s32.4) :cost 1 :commutative t)
   (s32.4-andnot        #:vpandn       (s32.4) (s32.4 s32.4) :cost 1)
   (s32.4-not           nil            (s32.4) (s32.4)       :cost 1 :encoding :none)
   (two-arg-s32.4+      #:vpaddd       (s32.4) (s32.4 s32.4) :cost 2 :commutative t)
   (two-arg-s32.4-      #:vpsubd       (s32.4) (s32.4 s32.4) :cost 2)
   (two-arg-s32.4-mullo #:vpmulld      (s32.4) (s32.4 s32.4) :cost 2 :commutative t)
   (two-arg-s32.4=      #:vpcmpeqq     (u32.4) (s32.4 s32.4) :cost 1 :commutative t)
   (two-arg-s32.4/=     nil            (u32.4) (s32.4 s32.4) :cost 2 :commutative t :encoding :none)
   (two-arg-s32.4>      #:vpcmpgtq     (u32.4) (s32.4 s32.4) :cost 1)
   (two-arg-s32.4<      nil            (u32.4) (s32.4 s32.4) :cost 1 :encoding :none)
   (two-arg-s32.4>=     nil            (u32.4) (s32.4 s32.4) :cost 2 :encoding :none)
   (two-arg-s32.4<=     nil            (u32.4) (s32.4 s32.4) :cost 2 :encoding :none)
   (s32.4-unpackhi      #:vpunpckhdq   (s32.4) (s32.4 s32.4) :cost 1)
   (s32.4-unpacklo      #:vpunpckldq   (s32.4) (s32.4 s32.4) :cost 1)
   (s32.4-blend         #:vblendps     (s32.4) (s32.4 s32.4 sb-simd::imm4) :cost 1)
   (s32.4-permute       #:vpermilps    (s32.4) (s32.4 sb-simd::imm8) :cost 1)
   ;; s64.2
   (s64.2!-from-s64     nil            (s64.2) (s64)         :cost 1 :encoding :none)
   (s64.2!-from-p128    #:vmovdqa      (s64.2) (p128)        :cost 1 :encoding :move)
   (s64.2!-from-p256    nil            (s64.2) (p256)        :cost 1 :encoding :custom)
   (make-s64.2          nil            (s64.2) (s64 s64)     :cost 1 :encoding :none)
   (s64.2-values        nil            (s64 s64) (s64.2)     :cost 1 :encoding :none)
   (s64.2-broadcast     nil            (s64.2) (s64)         :cost 1 :encoding :none)
   (two-arg-s64.2-and   #:vpand        (s64.2) (s64.2 s64.2) :cost 1 :commutative t)
   (two-arg-s64.2-or    #:vpor         (s64.2) (s64.2 s64.2) :cost 1 :commutative t)
   (two-arg-s64.2-xor   #:vpxor        (s64.2) (s64.2 s64.2) :cost 1 :commutative t)
   (s64.2-andnot        #:vpandn       (s64.2) (s64.2 s64.2) :cost 1)
   (s64.2-not           nil            (s64.2) (s64.2)       :cost 1 :encoding :none)
   (two-arg-s64.2+      #:vpaddq       (s64.2) (s64.2 s64.2) :cost 2 :commutative t)
   (two-arg-s64.2-      #:vpsubq       (s64.2) (s64.2 s64.2) :cost 2)
   (s64.2-shiftl        #:vpsllq       (s64.2) (s64.2 s64.2) :cost 1)
   (s64.2-shiftr        #:vpsrlq       (s64.2) (s64.2 s64.2) :cost 1)
   (two-arg-s64.2=      #:vpcmpeqq     (u64.2) (s64.2 s64.2) :cost 1 :commutative t)
   (two-arg-s64.2/=     nil            (u64.2) (s64.2 s64.2) :cost 2 :commutative t :encoding :none)
   (two-arg-s64.2>      #:vpcmpgtq     (u64.2) (s64.2 s64.2) :cost 1)
   (two-arg-s64.2<      nil            (u64.2) (s64.2 s64.2) :cost 1 :encoding :none)
   (two-arg-s64.2>=     nil            (u64.2) (s64.2 s64.2) :cost 2 :encoding :none)
   (two-arg-s64.2<=     nil            (u64.2) (s64.2 s64.2) :cost 2 :encoding :none)
   (s64.2-unpackhi      #:vpunpckhqdq  (s64.2) (s64.2 s64.2) :cost 1)
   (s64.2-unpacklo      #:vpunpcklqdq  (s64.2) (s64.2 s64.2) :cost 1)
   (s64.2-blend         #:vblendpd     (s64.2) (s64.2 s64.2 sb-simd::imm4) :cost 1)
   (s64.2-permute       #:vpermilpd    (s64.2) (s64.2 sb-simd::imm8) :cost 1)
   ;; s8.32
   (s8.32!-from-s8      nil            (s8.32) (s8) :cost 1 :encoding :none)
   (s8.32!-from-p128    #:vmovdqa      (s8.32) (p128) :cost 1 :encoding :move)
   (s8.32!-from-p256    #:vmovdqa      (s8.32) (p256) :cost 1 :encoding :move)
   (make-s8.32          nil            (s8.32) (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) :cost 1 :encoding :none)
   (s8.32-values        nil            (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) (s8.32) :cost 1 :encoding :none)
   (s8.32-broadcast     nil            (s8.32) (s8) :cost 1 :encoding :none)
   (s8.32-extract128    #:vextractf128 (s8.16) (s8.32 sb-simd::imm1) :cost 1)
   (s8.32-insert128     #:vinsertf128  (s8.32) (s8.32 s8.16 sb-simd::imm1) :cost 1)
   (s8.32-permute128    #:vperm2f128   (s8.32) (s8.32 s8.32 sb-simd::imm8) :cost 1)
   ;; s16.16
   (s16.16!-from-s16    nil            (s16.16) (s16) :cost 1 :encoding :none)
   (s16.16!-from-p128   #:vmovdqa      (s16.16) (p128) :cost 1 :encoding :move)
   (s16.16!-from-p256   #:vmovdqa      (s16.16) (p256) :cost 1 :encoding :move)
   (make-s16.16         nil            (s16.16) (s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16) :cost 1 :encoding :none)
   (s16.16-values       nil            (s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16) (s16.16) :cost 1 :encoding :none)
   (s16.16-broadcast    nil            (s16.16) (s16) :cost 1 :encoding :none)
   (s16.16-extract128   #:vextractf128 (s16.8) (s16.16 sb-simd::imm1) :cost 1)
   (s16.16-insert128    #:vinsertf128  (s16.16) (s16.16 s16.8 sb-simd::imm1) :cost 1)
   (s16.16-permute128   #:vperm2f128   (s16.16) (s16.16 s16.16 sb-simd::imm8) :cost 1)
   ;; s32.8
   (s32.8!-from-s32     nil            (s32.8) (s32) :cost 1 :encoding :none)
   (s32.8!-from-p128    #:vmovdqa      (s32.8) (p128) :cost 1 :encoding :move)
   (s32.8!-from-p256    #:vmovdqa      (s32.8) (p256) :cost 1 :encoding :move)
   (make-s32.8          nil            (s32.8) (s32 s32 s32 s32 s32 s32 s32 s32) :cost 1 :encoding :none)
   (s32.8-values        nil            (s32 s32 s32 s32 s32 s32 s32 s32) (s32.8) :cost 1 :encoding :none)
   (s32.8-broadcast     nil            (s32.8) (s32) :cost 1 :encoding :none)
   (s32.8-from-f32.8    #:vcvtps2dq    (s32.8) (f32.8)       :cost 4)
   (s32.8-blend         #:vblendps     (s32.8) (s32.4 s32.4 sb-simd::imm8) :cost 1)
   (s32.8-permute       #:vpermilps    (s32.8) (s32.4 sb-simd::imm8) :cost 1)
   (s32.8-extract128    #:vextractf128 (s32.4) (s32.8 sb-simd::imm1) :cost 1)
   (s32.8-insert128     #:vinsertf128  (s32.8) (s32.8 s32.4 sb-simd::imm1) :cost 1)
   (s32.8-permute128    #:vperm2f128   (s32.8) (s32.8 s32.8 sb-simd::imm8) :cost 1)
   ;; s64.4
   (s64.4!-from-s64     nil            (s64.4) (s64) :cost 1 :encoding :none)
   (s64.4!-from-p128    #:vmovdqa      (s64.4) (p128) :cost 1 :encoding :move)
   (s64.4!-from-p256    #:vmovdqa      (s64.4) (p256) :cost 1 :encoding :move)
   (make-s64.4          nil            (s64.4) (s64 s64 s64 s64) :cost 1 :encoding :none)
   (s64.4-values        nil            (s64 s64 s64 s64) (s64.4) :cost 1 :encoding :none)
   (s64.4-broadcast     nil            (s64.4) (s64) :cost 1 :encoding :none)
   (s64.4-blend         #:vblendpd     (s64.4) (s64.4 s64.4 sb-simd::imm4) :cost 1)
   (s64.4-permute       #:vpermilpd    (s64.4) (s64.4 sb-simd::imm8) :cost 1)
   (s64.4-extract128    #:vextractf128 (s64.2) (s64.4 sb-simd::imm1) :cost 1)
   (s64.4-insert128     #:vinsertf128  (s64.4) (s64.4 s64.2 sb-simd::imm1) :cost 1)
   (s64.4-permute128    #:vperm2f128   (s64.4) (s64.4 s64.4 sb-simd::imm8) :cost 1))
  (:loads
   (f32.4-load  #:vmovups f32.4  f32vec f32.4-aref f32.4-row-major-aref)
   (f64.2-load  #:vmovupd f64.2  f64vec f64.2-aref f64.2-row-major-aref)
   (f32.8-load  #:vmovups f32.8  f32vec f32.8-aref f32.8-row-major-aref)
   (f64.4-load  #:vmovupd f64.4  f64vec f64.4-aref f64.4-row-major-aref)
   ;(u8.16-load  #:vmovdqa u8.16  u8vec  u8.16-aref u8.16-row-major-aref)
   (u16.8-load  #:vmovdqa u16.8  u16vec u16.8-aref u16.8-row-major-aref)
   (u32.4-load  #:vmovdqa u32.4  u32vec u32.4-aref u32.4-row-major-aref)
   (u64.2-load  #:vmovdqa u64.2  u64vec u64.2-aref u64.2-row-major-aref)
   ;(u8.32-load  #:vmovdqu u8.32  u8vec  u8.32-aref u8.32-row-major-aref)
   (u16.16-load #:vmovdqu u16.16 u16vec u16.16-aref u16.16-row-major-aref)
   (u32.8-load  #:vmovdqu u32.8  u32vec u32.8-aref u32.8-row-major-aref)
   (u64.4-load  #:vmovdqu u64.4  u64vec u64.4-aref u64.4-row-major-aref)
   ;(s8.16-load  #:vmovdqa s8.16  s8vec  s8.16-aref s8.16-row-major-aref)
   (s16.8-load  #:vmovdqa s16.8  s16vec s16.8-aref s16.8-row-major-aref)
   (s32.4-load  #:vmovdqa s32.4  s32vec s32.4-aref s32.4-row-major-aref)
   (s64.2-load  #:vmovdqa s64.2  s64vec s64.2-aref s64.2-row-major-aref)
   ;(s8.32-load  #:vmovdqu s8.32  s8vec  s8.32-aref s8.32-row-major-aref)
   (s16.16-load #:vmovdqu s16.16 s16vec s16.16-aref s16.16-row-major-aref)
   (s32.8-load  #:vmovdqu s32.8  s32vec s32.8-aref s32.8-row-major-aref)
   (s64.4-load  #:vmovdqu s64.4  s64vec s64.4-aref s64.4-row-major-aref))
  (:stores
   (f32.4-store #:vmovups f32.4  f32vec f32.4-aref f32.4-row-major-aref)
   (f64.2-store #:vmovupd f64.2  f64vec f64.2-aref f64.2-row-major-aref)
   (f32.8-store #:vmovups f32.8  f32vec f32.8-aref f32.8-row-major-aref)
   (f64.4-store #:vmovupd f64.4  f64vec f64.4-aref f64.4-row-major-aref)
   ;(u8.16-store #:vmovdqu u8.16  u8vec  u8.16-aref u8.16-row-major-aref)
   (u16.8-store #:vmovdqu u16.8  u16vec u16.8-aref u16.8-row-major-aref)
   (u32.4-store #:vmovdqu u32.4  u32vec u32.4-aref u32.4-row-major-aref)
   (u64.2-store #:vmovdqu u64.2  u64vec u64.2-aref u64.2-row-major-aref)
   ;(s8.16-store #:vmovdqu s8.16  s8vec  s8.16-aref s8.16-row-major-aref)
   (s16.8-store #:vmovdqu s16.8  s16vec s16.8-aref s16.8-row-major-aref)
   (s32.4-store #:vmovdqu s32.4  s32vec s32.4-aref s32.4-row-major-aref)
   (s64.2-store #:vmovdqu s64.2  s64vec s64.2-aref s64.2-row-major-aref)
   ;(u8.32-store    #:vmovdqu  u8.32  u8vec  u8.32-aref  u8.32-row-major-aref)
   (u16.16-store   #:vmovdqu  u16.16 u16vec u16.16-aref u16.16-row-major-aref)
   (u32.8-store    #:vmovdqu  u32.8  u32vec u32.8-aref  u32.8-row-major-aref)
   (u64.4-store    #:vmovdqu  u64.4  u64vec u64.4-aref  u64.4-row-major-aref)
   ;(s8.32-store    #:vmovdqu  s8.32  s8vec  s8.32-aref  s8.32-row-major-aref)
   (s16.16-store   #:vmovdqu  s16.16 s16vec s16.16-aref s16.16-row-major-aref)
   (s32.8-store    #:vmovdqu  s32.8  s32vec s32.8-aref  s32.8-row-major-aref)
   (s64.4-store    #:vmovdqu  s64.4  s64vec s64.4-aref  s64.4-row-major-aref)
   (f32.4-ntstore  #:vmovntps f32.4  f32vec f32.4-non-temporal-aref  f32.4-non-temporal-row-major-aref)
   (f64.2-ntstore  #:vmovntpd f64.2  f64vec f64.2-non-temporal-aref  f64.2-non-temporal-row-major-aref)
   (f32.8-ntstore  #:vmovntps f32.8  f32vec f32.8-non-temporal-aref  f32.8-non-temporal-row-major-aref)
   (f64.4-ntstore  #:vmovntpd f64.4  f64vec f64.4-non-temporal-aref  f64.4-non-temporal-row-major-aref)
   ;(u8.16-ntstore  #:vmovntdq u8.16  u8vec  u8.16-non-temporal-aref  u8.16-non-temporal-row-major-aref)
   (u16.8-ntstore  #:vmovntdq u16.8  u16vec u16.8-non-temporal-aref  u16.8-non-temporal-row-major-aref)
   (u32.4-ntstore  #:vmovntdq u32.4  u32vec u32.4-non-temporal-aref  u32.4-non-temporal-row-major-aref)
   (u64.2-ntstore  #:vmovntdq u64.2  u64vec u64.2-non-temporal-aref  u64.2-non-temporal-row-major-aref)
   ;(s8.16-ntstore  #:vmovntdq s8.16  s8vec  s8.16-non-temporal-aref  s8.16-non-temporal-row-major-aref)
   (s16.8-ntstore  #:vmovntdq s16.8  s16vec s16.8-non-temporal-aref  s16.8-non-temporal-row-major-aref)
   (s32.4-ntstore  #:vmovntdq s32.4  s32vec s32.4-non-temporal-aref  s32.4-non-temporal-row-major-aref)
   (s64.2-ntstore  #:vmovntdq s64.2  s64vec s64.2-non-temporal-aref  s64.2-non-temporal-row-major-aref)
   ;(u8.32-ntstore  #:vmovntdq u8.32  u8vec  u8.32-non-temporal-aref  u8.32-non-temporal-row-major-aref)
   (u16.16-ntstore #:vmovntdq u16.16 u16vec u16.16-non-temporal-aref u16.16-non-temporal-row-major-aref)
   (u32.8-ntstore  #:vmovntdq u32.8  u32vec u32.8-non-temporal-aref  u32.8-non-temporal-row-major-aref)
   (u64.4-ntstore  #:vmovntdq u64.4  u64vec u64.4-non-temporal-aref  u64.4-non-temporal-row-major-aref)
   ;(s8.32-ntstore  #:vmovntdq s8.32  s8vec  s8.32-non-temporal-aref  s8.32-non-temporal-row-major-aref)
   (s16.16-ntstore #:vmovntdq s16.16 s16vec s16.16-non-temporal-aref s16.16-non-temporal-row-major-aref)
   (s32.8-ntstore  #:vmovntdq s32.8  s32vec s32.8-non-temporal-aref  s32.8-non-temporal-row-major-aref)
   (s64.4-ntstore  #:vmovntdq s64.4  s64vec s64.4-non-temporal-aref  s64.4-non-temporal-row-major-aref)))

(in-package #:sb-simd-avx2)

(sb-simd::define-instruction-set #:avx2
  (:test #+x86-64 (plusp (sb-alien:extern-alien "avx2_supported" sb-alien:int) #-x86-64 nil))
  (:primitives
   ;; f64.4
   (f64.4-permute4x64     #:vpermpd       (f64.4) (f64.4 sb-simd::imm8) :cost 1)
   (f64.4-reverse         nil             (f64.4) (f64.4)         :cost 2 :encoding :none)
   ;; u8.16
   (u8.16-broadcast       nil             (u8.16) (u8)            :cost 1 :encoding :none)
   (u8.16-broadcastvec    #:vpbroadcastb  (u8.16) (u8.16)         :cost 1)
   ;; s8.16
   (s8.16-broadcast       nil             (s8.16) (s8)            :cost 1 :encoding :none)
   (s8.16-broadcastvec    #:vpbroadcastb  (s8.16) (s8.16)         :cost 1)
   ;; u16.8
   (u16.8-broadcast       nil             (u16.16) (u16)          :cost 1 :encoding :none)
   (u16.8-broadcastvec    #:vpbroadcastw  (u16.16) (u16.8)        :cost 1)
   (u16.8-blend           #:vpblendw      (u16.8) (u16.8 u16.8 sb-simd::imm8) :cost 1)
   ;; s16.8
   (s16.8-broadcast       nil             (s16.16) (s16)          :cost 1 :encoding :none)
   (s16.8-broadcastvec    #:vpbroadcastw  (s16.16) (s16.8)        :cost 1)
   (s16.8-blend           #:vpblendw      (s16.8) (s16.8 s16.8 sb-simd::imm8) :cost 1)
   ;; u32.4
   (u32.4-broadcast       nil             (u32.4) (u32)           :cost 1 :encoding :none)
   (u32.4-broadcastvec    #:vpbroadcastd  (u32.4) (u32.4)         :cost 1)
   (u32.4-shiftl          #:vpsllvd       (u32.4) (u32.4 u32.4)   :cost 1)
   (u32.4-shiftr          #:vpsrlvd       (u32.4) (u32.4 u32.4)   :cost 1)
   (u32.4-blend           #:vpblendd      (u32.4) (u32.4 u32.4 sb-simd::imm4) :cost 1)
   ;; s32.4
   (s32.4-broadcast       nil             (s32.4) (s32)           :cost 1 :encoding :none)
   (s32.4-broadcastvec    #:vpbroadcastd  (s32.4) (s32.4)         :cost 1)
   (s32.4-shiftl          #:vpsllvq       (s32.4) (s32.4 s32.4)   :cost 1)
   (s32.4-shiftr          #:vpsrlvq       (s32.4) (s32.4 s32.4)   :cost 1)
   (s32.4-blend           #:vpblendd      (s32.4) (s32.4 s32.4 sb-simd::imm4) :cost 1)
   ;; u64.2
   (u64.2-broadcast       nil             (u64.2) (u64)           :cost 1 :encoding :none)
   (u64.2-broadcastvec    #:vpbroadcastq  (u64.2) (u64.2)         :cost 1)
   (u64.2-shiftl          #:vpsllvd       (u64.2) (u64.2 u64.2)   :cost 1)
   (u64.2-shiftr          #:vpsrlvd       (u64.2) (u64.2 u64.2)   :cost 1)
   ;; s64.2
   (s64.2-broadcast       nil             (s64.2) (s64)           :cost 1 :encoding :none)
   (s64.2-broadcastvec    #:vpbroadcastq  (s64.2) (s64.2)         :cost 1)
   (s64.2-shiftl          #:vpsllvq       (s64.2) (s64.2 s64.2)   :cost 1)
   (s64.2-shiftr          #:vpsrlvq       (s64.2) (s64.2 s64.2)   :cost 1)
   ;; u8.32
   (make-u8.32            nil             (u8.32) (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) :cost 1 :encoding :none)
   (u8.32-values          nil             (u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8 u8) (u8.32) :cost 1 :encoding :none)
   (u8.32-broadcast       nil             (u8.32) (u8)            :cost 1 :encoding :none)
   (u8.32-broadcastvec    #:vpbroadcastb  (u8.32) (u8.32)         :cost 1)
   (two-arg-u8.32-and     #:vpand         (u8.32) (u8.32 u8.32)   :cost 1 :commutative t)
   (two-arg-u8.32-or      #:vpor          (u8.32) (u8.32 u8.32)   :cost 1 :commutative t)
   (two-arg-u8.32-xor     #:vpxor         (u8.32) (u8.32 u8.32)   :cost 1 :commutative t)
   (u8.32-andnot          #:vpandn        (u8.32) (u8.32 u8.32)   :cost 1)
   (u8.32-not             nil             (u8.32) (u8.32)         :cost 1 :encoding :none)
   (two-arg-u8.32-max     #:vpmaxub       (u8.32) (u8.32 u8.32)   :cost 2 :commutative t)
   (two-arg-u8.32-min     #:vpminub       (u8.32) (u8.32 u8.32)   :cost 2 :commutative t)
   (two-arg-u8.32+        #:vpaddw        (u8.32) (u8.32 u8.32)   :cost 2 :commutative t)
   (two-arg-u8.32-        #:vpsubw        (u8.32) (u8.32 u8.32)   :cost 2)
   (two-arg-u8.32=        #:vpcmpeqb      (u8.32) (u8.32 u8.32)   :cost 1 :commutative t)
   (two-arg-u8.32/=       nil             (u8.32) (u8.32 u8.32)   :cost 2 :commutative t :encoding :none)
   (two-arg-u8.32>        #:vpcmpgtb      (u8.32) (u8.32 u8.32)   :cost 1)
   (two-arg-u8.32<        nil             (u8.32) (u8.32 u8.32)   :cost 1 :encoding :none)
   (two-arg-u8.32>=       nil             (u8.32) (u8.32 u8.32)   :cost 2 :encoding :none)
   (two-arg-u8.32<=       nil             (u8.32) (u8.32 u8.32)   :cost 2 :encoding :none)
   (u8.32-avg             #:vpavgb        (u8.32) (u8.32 u8.32)   :cost 2)
   (u8.32-packus          #:vpackuswb     (u8.32) (u16.16 u16.16) :cost 2)
   (u8.32-unpackhi        #:vpunpckhbw    (u8.32) (u8.32 u8.32)   :cost 1)
   (u8.32-unpacklo        #:vpunpcklbw    (u8.32) (u8.32 u8.32)   :cost 1)
   (u8.32-permute128      #:vperm2i128    (u8.32) (u8.32 u8.32 sb-simd::imm8) :cost 1)
   (u8.32-extract128      #:vextracti128  (u8.16) (u8.32 sb-simd::imm1) :cost 1)
   (u8.32-insert128       #:vinserti128   (u8.32) (u8.32 u8.16 sb-simd::imm8) :cost 1)
   ;; u16.16
   (make-u16.16           nil            (u16.16) (u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16) :cost 1 :encoding :none)
   (u16.16-values         nil            (u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16 u16) (u16.16) :cost 1 :encoding :none)
   (u16.16-broadcast      nil            (u16.16) (u16)           :cost 1 :encoding :none)
   (u16.16-broadcastvec   #:vpbroadcastw (u16.16) (u16.16)        :cost 1)
   (u16.16-from-u8.16     #:vpmovzxbw    (u16.16) (u8.16)         :cost 5)
   (two-arg-u16.16-and    #:vpand        (u16.16) (u16.16 u16.16) :cost 1 :commutative t)
   (two-arg-u16.16-or     #:vpor         (u16.16) (u16.16 u16.16) :cost 1 :commutative t)
   (two-arg-u16.16-xor    #:vpxor        (u16.16) (u16.16 u16.16) :cost 1 :commutative t)
   (u16.16-andnot         #:vpandn       (u16.16) (u16.16 u16.16) :cost 1)
   (u16.16-not            nil            (u16.16) (u16.16)        :cost 1 :encoding :none)
   (two-arg-u16.16-max    #:vpmaxuw      (u16.16) (u16.16 u16.16) :cost 2 :commutative t)
   (two-arg-u16.16-min    #:vpminuw      (u16.16) (u16.16 u16.16) :cost 2 :commutative t)
   (two-arg-u16.16+       #:vpaddw       (u16.16) (u16.16 u16.16) :cost 2 :commutative t)
   (two-arg-u16.16-       #:vpsubw       (u16.16) (u16.16 u16.16) :cost 2)
   (two-arg-s16.16-mulhi  #:vpmulhw      (u16.16) (u16.16 u16.16) :cost 1 :commutative t)
   (two-arg-u16.16=       #:vpcmpeqw     (u16.16) (u16.16 u16.16) :cost 1 :commutative t)
   (two-arg-u16.16/=      nil            (u16.16) (u16.16 u16.16) :cost 2 :commutative t :encoding :none)
   (two-arg-u16.16>       #:vpcmpgtw     (u16.16) (u16.16 u16.16) :cost 1)
   (two-arg-u16.16<       nil            (u16.16) (u16.16 u16.16) :cost 1 :encoding :none)
   (two-arg-u16.16>=      nil            (u16.16) (u16.16 u16.16) :cost 2 :encoding :none)
   (two-arg-u16.16<=      nil            (u16.16) (u16.16 u16.16) :cost 2 :encoding :none)
   (u16.16-shiftl         #:vpsllw       (u16.16) (u16.16 u16.8)  :cost 2)
   (u16.16-shiftr         #:vpsrlw       (u16.16) (u16.16 u16.8)  :cost 2)
   (u16.16-avg            #:vpavgw       (u16.16) (u16.16 u16.16) :cost 1)
   (u16.16-packus         #:vpackusdw    (u16.16) (u32.8 u32.8)   :cost 1)
   (u16.16-unpackhi       #:vpunpckhwd   (u16.16) (u16.16 u16.16) :cost 1)
   (u16.16-unpacklo       #:vpunpcklwd   (u16.16) (u16.16 u16.16) :cost 1)
   (u16.16-shufflehi      #:vpshufhw     (u16.16) (u16.16 sb-simd::imm8) :cost 1)
   (u16.16-shufflelo      #:vpshuflw     (u16.16) (u16.16 sb-simd::imm8) :cost 1)
   (u16.16-blend          #:vpblendw     (u16.16) (u16.16 u16.16 sb-simd::imm8) :cost 1)
   (u16.16-extract128     #:vextracti128 (u16.8)  (u16.16 sb-simd::imm1) :cost 1)
   (u16.16-insert128      #:vinserti128  (u16.16) (u16.16 u16.8 sb-simd::imm1) :cost 1)
   (u16.16-permute128     #:vperm2i128   (u16.16) (u16.16 u16.16 sb-simd::imm8) :cost 1)
   ;; u32.8
   (make-u32.8            nil            (u32.8) (u32 u32 u32 u32 u32 u32 u32 u32) :cost 1 :encoding :none)
   (u32.8-values          nil            (u32 u32 u32 u32 u32 u32 u32 u32) (u32.8) :cost 1 :encoding :none)
   (u32.8-broadcast       nil            (u32.8) (u32)         :cost 1 :encoding :none)
   (u32.8-broadcastvec    #:vpbroadcastd (u32.8) (u32.8)       :cost 1)
   (u32.8-from-u16.8      #:vpmovzxwd    (u32.8) (u16.8)       :cost 5)
   (u32.8-from-u8.16      #:vpmovzxbd    (u32.8) (u8.16)       :cost 5)
   (two-arg-u32.8-and     #:vpand        (u32.8) (u32.8 u32.8) :cost 1 :commutative t)
   (two-arg-u32.8-or      #:vpor         (u32.8) (u32.8 u32.8) :cost 1 :commutative t)
   (two-arg-u32.8-xor     #:vpxor        (u32.8) (u32.8 u32.8) :cost 1 :commutative t)
   (u32.8-andnot          #:vpandn       (u32.8) (u32.8 u32.8) :cost 1)
   (u32.8-not             nil            (u32.8) (u32.8)       :cost 1 :encoding :none)
   (two-arg-u32.8-max     #:vpmaxud      (u32.8) (u32.8 u32.8) :cost 2 :commutative t)
   (two-arg-u32.8-min     #:vpminud      (u32.8) (u32.8 u32.8) :cost 2 :commutative t)
   (two-arg-u32.8+        #:vpaddd       (u32.8) (u32.8 u32.8) :cost 2 :commutative t)
   (two-arg-u32.8-        #:vpsubd       (u32.8) (u32.8 u32.8) :cost 2)
   (two-arg-u32.8=        #:vpcmpeqd     (u32.8) (u32.8 u32.8) :cost 1 :commutative t)
   (two-arg-u32.8/=       nil            (u32.8) (u32.8 u32.8) :cost 2 :commutative t :encoding :none)
   (two-arg-u32.8>        #:vpcmpgtd     (u32.8) (u32.8 u32.8) :cost 1)
   (two-arg-u32.8<        nil            (u32.8) (u32.8 u32.8) :cost 1 :encoding :none)
   (two-arg-u32.8>=       nil            (u32.8) (u32.8 u32.8) :cost 2 :encoding :none)
   (two-arg-u32.8<=       nil            (u32.8) (u32.8 u32.8) :cost 2 :encoding :none)
   (u32.8-shiftl          #:vpsllvd      (u32.8) (u32.8 u32.8) :cost 1)
   (u32.8-shiftr          #:vpsrlvd      (u32.8) (u32.8 u32.8) :cost 1)
   (u32.8-unpackhi        #:vpunpckhdq   (u32.8) (u32.8 u32.8) :cost 1)
   (u32.8-unpacklo        #:vpunpckldq   (u32.8) (u32.8 u32.8) :cost 1)
   (u8.32-shuffle         #:vpshufb      (u8.32) (u8.32 u8.32) :cost 1)
   (u32.8-blend           #:vpblendd     (u32.8) (u32.8 u32.8 sb-simd::imm8) :cost 1)
   (u32.8-extract128      #:vextracti128 (u32.4) (u32.8 sb-simd::imm1) :cost 1)
   (u32.8-insert128       #:vinserti128  (u32.8) (u32.8 u32.4 sb-simd::imm1) :cost 1)
   (u32.8-permute128      #:vperm2i128   (u32.8) (u32.8 u32.8 sb-simd::imm8) :cost 1)
   ;; u64.4
   (make-u64.4            nil            (u64.4) (u64 u64 u64 u64) :cost 1 :encoding :none)
   (u64.4-values          nil            (u64 u64 u64 u64) (u64.4) :cost 1 :encoding :none)
   (u64.4-broadcast       nil            (u64.4) (u64)         :cost 1 :encoding :none)
   (u64.4-broadcastvec    #:vpbroadcastq (u64.4) (u64.4)       :cost 1)
   (u64.4-from-u16.8      #:vpmovzxwq    (u64.4) (u16.8)       :cost 5)
   (u64.4-from-u32.4      #:vpmovzxdq    (u64.4) (u32.4)       :cost 5)
   (u64.4-from-u8.16      #:vpmovzxbq    (u64.4) (u8.16)       :cost 5)
   (two-arg-u64.4-and     #:vpand        (u64.4) (u64.4 u64.4) :cost 1 :commutative t)
   (two-arg-u64.4-or      #:vpor         (u64.4) (u64.4 u64.4) :cost 1 :commutative t)
   (two-arg-u64.4-xor     #:vpxor        (u64.4) (u64.4 u64.4) :cost 1 :commutative t)
   (u64.4-andnot          #:vpandn       (u64.4) (u64.4 u64.4) :cost 1)
   (u64.4-not             nil            (u64.4) (u64.4)       :cost 1 :encoding :none)
   (two-arg-u64.4+        #:vpaddq       (u64.4) (u64.4 u64.4) :cost 2 :commutative t)
   (two-arg-u64.4-        #:vpsubq       (u64.4) (u64.4 u64.4) :cost 2)
   (two-arg-u64.4-mul     #:vpmuldq      (u64.4) (u64.4 u64.4) :cost 1 :commutative t)
   (two-arg-u64.4=        #:vpcmpeqq     (u64.4) (u64.4 u64.4) :cost 1 :commutative t)
   (two-arg-u64.4/=       nil            (u64.4) (u64.4 u64.4) :cost 2 :commutative t :encoding :none)
   (two-arg-u64.4>        #:vpcmpgtq     (u64.4) (u64.4 u64.4) :cost 1)
   (two-arg-u64.4<        nil            (u64.4) (u64.4 u64.4) :cost 1 :encoding :none)
   (two-arg-u64.4>=       nil            (u64.4) (u64.4 u64.4) :cost 2 :encoding :none)
   (two-arg-u64.4<=       nil            (u64.4) (u64.4 u64.4) :cost 2 :encoding :none)
   (u64.4-shiftl          #:vpsllvq      (u64.4) (u64.4 u64.4) :cost 1)
   (u64.4-shiftr          #:vpsrlvq      (u64.4) (u64.4 u64.4) :cost 1)
   (u64.4-unpackhi        #:vpunpckhqdq  (u64.4) (u64.4 u64.4) :cost 1)
   (u64.4-unpacklo        #:vpunpcklqdq  (u64.4) (u64.4 u64.4) :cost 1)
   (u64.4-extract128      #:vextracti128 (u64.2) (u64.4 sb-simd::imm1) :cost 1)
   (u64.4-insert128       #:vinserti128  (u64.4) (u64.4 u64.2 sb-simd::imm1) :cost 1)
   (u64.4-permute128      #:vperm2i128   (u64.4) (u64.4 u64.4 sb-simd::imm8) :cost 1)
   ;; s8.32
   (make-s8.32            nil            (s8.32) (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) :cost 1 :encoding :none)
   (s8.32-values          nil            (s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8 s8) (s8.32) :cost 1 :encoding :none)
   (s8.32-broadcast       nil            (s8.32) (s8)             :cost 1 :encoding :none)
   (s8.32-broadcastvec    #:vpbroadcastb (s8.32) (s8.32)          :cost 1)
   (two-arg-s8.32-and     #:vpand        (s8.32) (s8.32 s8.32)    :cost 1 :commutative t)
   (two-arg-s8.32-or      #:vpor         (s8.32) (s8.32 s8.32)    :cost 1 :commutative t)
   (two-arg-s8.32-xor     #:vpxor        (s8.32) (s8.32 s8.32)    :cost 1 :commutative t)
   (s8.32-andnot          #:vpandn       (s8.32) (s8.32 s8.32)    :cost 1)
   (s8.32-not             nil            (s8.32) (s8.32)          :cost 1 :encoding :none)
   (two-arg-s8.32-max     #:vpmaxsb      (s8.32) (s8.32 s8.32)    :cost 2 :commutative t)
   (two-arg-s8.32-min     #:vpminsb      (s8.32) (s8.32 s8.32)    :cost 2 :commutative t)
   (two-arg-s8.32+        #:vpaddb       (s8.32) (s8.32 s8.32)    :cost 2 :commutative t)
   (two-arg-s8.32-        #:vpsubb       (s8.32) (s8.32 s8.32)    :cost 2)
   (two-arg-s32.8-mullo   #:vpmulld      (s32.8) (s32.8 s32.8)    :cost 2 :commutative t)
   (two-arg-s8.32=        #:vpcmpeqb     (u8.32) (s8.32 s8.32)    :cost 1 :commutative t)
   (two-arg-s8.32/=       nil            (u8.32) (s8.32 s8.32)    :cost 2 :commutative t :encoding :none)
   (two-arg-s8.32>        #:vpcmpgtb     (u8.32) (s8.32 s8.32)    :cost 1)
   (two-arg-s8.32<        nil            (u8.32) (s8.32 s8.32)    :cost 1 :encoding :none)
   (two-arg-s8.32>=       nil            (u8.32) (s8.32 s8.32)    :cost 2 :encoding :none)
   (two-arg-s8.32<=       nil            (u8.32) (s8.32 s8.32)    :cost 2 :encoding :none)
   (s8.32-abs             #:vpabsb       (s8.32) (s8.32)          :cost 2)
   (s8.32-packs           #:vpacksswb    (s8.32) (s16.16 s16.16)  :cost 2)
   (s8.32-unpackhi        #:vpunpckhbw   (s8.32) (s8.32 s8.32)    :cost 1)
   (s8.32-unpacklo        #:vpunpcklbw   (s8.32) (s8.32 s8.32)    :cost 1)
   (s8.32-shuffle         #:vpshufb      (s8.32) (s8.32 u8.32)    :cost 1)
   (s8.32-sign            #:vpsignb      (s8.32) (s8.32 s8.32)    :cost 1)
   (s8.32-broadcastvec    #:vpbroadcastb (s8.32) (s8.32)          :cost 1)
   (s8.32-extract128      #:vextracti128 (s8.16) (s8.32 sb-simd::imm1) :cost 1)
   (s8.32-insert128       #:vinserti128  (s8.32) (s8.32 s8.16 sb-simd::imm1) :cost 1)
   (s8.32-permute128      #:vperm2i128   (s8.32) (s8.32 s8.32 sb-simd::imm8) :cost 1)
   ;; s16.16
   (make-s16.16           nil            (s16.16) (s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16) :cost 1 :encoding :none)
   (s16.16-values         nil            (s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16 s16) (s16.16) :cost 1 :encoding :none)
   (s16.16-broadcast      nil            (s16.16) (s16)           :cost 1 :encoding :none)
   (s16.16-broadcastvec   #:vpbroadcastw (s16.16) (s16.16)        :cost 1)
   (s16.16-from-s8.16     #:vpmovsxbw    (s16.16) (s8.16)         :cost 5)
   (s16.16-from-u8.16     #:vpmovsxbw    (s16.16) (u8.16)         :cost 5)
   (two-arg-s16.16-and    #:vpand        (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16-or     #:vpor         (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16-xor    #:vpxor        (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (s16.16-andnot         #:vpandn       (s16.16) (s16.16 s16.16) :cost 1)
   (s16.16-not            nil            (s16.16) (s16.16)        :cost 1 :encoding :none)
   (two-arg-s16.16-max    #:vpmaxsw      (s16.16) (s16.16 s16.16) :cost 2 :commutative t)
   (two-arg-s16.16-min    #:vpminsw      (s16.16) (s16.16 s16.16) :cost 2 :commutative t)
   (two-arg-s16.16+       #:vpaddw       (s16.16) (s16.16 s16.16) :cost 2 :commutative t)
   (two-arg-s16.16-       #:vpsubw       (s16.16) (s16.16 s16.16) :cost 2)
   (two-arg-s16.16-mulhi  #:vpmulhw      (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16-mullo  #:vpmullw      (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16-mulhrs #:vpmulhrsw    (s16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16=       #:vpcmpeqw     (u16.16) (s16.16 s16.16) :cost 1 :commutative t)
   (two-arg-s16.16/=      nil            (u16.16) (s16.16 s16.16) :cost 2 :commutative t :encoding :none)
   (two-arg-s16.16>       #:vpcmpgtw     (u16.16) (s16.16 s16.16) :cost 1)
   (two-arg-s16.16<       nil            (u16.16) (s16.16 s16.16) :cost 1 :encoding :none)
   (two-arg-s16.16>=      nil            (u16.16) (s16.16 s16.16) :cost 2 :encoding :none)
   (two-arg-s16.16<=      nil            (u16.16) (s16.16 s16.16) :cost 2 :encoding :none)
   (s16.16-abs            #:vpabsw       (s16.16) (s16.16)        :cost 2)
   (s16.16-hadd           #:vphaddw      (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-hadds          #:vphaddsw     (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-madd           #:vpmaddwd     (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-maddubs        #:vpmaddubsw   (s16.16) (u8.32 s8.32)   :cost 2)
   (s16.16-hsub           #:vphsubw      (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-hsubs          #:vphsubsw     (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-packs          #:vpackssdw    (s16.16) (s32.8 s32.8)   :cost 1)
   (s16.16-unpackhi       #:vpunpckhwd   (s16.16) (s16.16 s16.16) :cost 1)
   (s16.16-unpacklo       #:vpunpcklwd   (s16.16) (s16.16 s16.16) :cost 1)
   (s16.16-shufflehi      #:vpshufhw     (s16.16) (s16.16 sb-simd::imm8) :cost 1)
   (s16.16-shufflelo      #:vpshuflw     (s16.16) (s16.16 sb-simd::imm8) :cost 1)
   (s16.16-shiftl         #:vpsllw       (s16.16) (s16.16 s16.8)  :cost 2)
   (s16.16-shiftr         #:vpsrlw       (s16.16) (s16.16 s16.8)  :cost 2)
   (s16.16-sign           #:vpsignw      (s16.16) (s16.16 s16.16) :cost 2)
   (s16.16-blend          #:vpblendw     (s16.16) (s16.16 s16.16 sb-simd::imm8) :cost 1)
   (s16.16-extract128     #:vextracti128 (s16.8) (s16.16 sb-simd::imm1) :cost 1)
   (s16.16-insert128      #:vinserti128  (s16.16) (s16.16 s16.8 sb-simd::imm1) :cost 1)
   (s16.16-permute128     #:vperm2i128   (s16.16) (s16.16 s16.16 sb-simd::imm8) :cost 1)
   ;; s32.8
   (make-s32.8            nil            (s32.8) (s32 s32 s32 s32 s32 s32 s32 s32) :cost 1 :encoding :none)
   (s32.8-values          nil            (s32 s32 s32 s32 s32 s32 s32 s32) (s32.8) :cost 1 :encoding :none)
   (s32.8-broadcast       nil            (s32.8) (s32)         :cost 1 :encoding :none)
   (s32.8-broadcastvec    #:vpbroadcastd (s32.8) (s32.8)       :cost 1)
   (s32.8-from-s16.8      #:vpmovsxwd    (s32.8) (s16.8)       :cost 5)
   (s32.8-from-u16.8      #:vpmovsxwd    (s32.8) (u16.8)       :cost 5)
   (s32.8-from-s8.16      #:vpmovsxbd    (s32.8) (s8.16)       :cost 5)
   (s32.8-from-u8.16      #:vpmovsxbd    (s32.8) (u8.16)       :cost 5)
   (two-arg-s32.8-and     #:vpand        (s32.8) (s32.8 s32.8) :cost 1 :commutative t)
   (two-arg-s32.8-or      #:vpor         (s32.8) (s32.8 s32.8) :cost 1 :commutative t)
   (two-arg-s32.8-xor     #:vpxor        (s32.8) (s32.8 s32.8) :cost 1 :commutative t)
   (s32.8-andnot          #:vpandn       (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-not             nil            (s32.8) (s32.8)       :cost 1 :encoding :none)
   (two-arg-s32.8-max     #:vpmaxsd      (s32.8) (s32.8 s32.8) :cost 2 :commutative t)
   (two-arg-s32.8-min     #:vpminsd      (s32.8) (s32.8 s32.8) :cost 2 :commutative t)
   (two-arg-s32.8+        #:vpaddd       (s32.8) (s32.8 s32.8) :cost 2 :commutative t)
   (two-arg-s32.8-        #:vpsubd       (s32.8) (s32.8 s32.8) :cost 2)
   (two-arg-s32.8-mullo   #:vpmulld      (s32.8) (s32.8 s32.8) :cost 2 :commutative t)
   (two-arg-s32.8=        #:vpcmpeqd     (u32.8) (s32.8 s32.8) :cost 1 :commutative t)
   (two-arg-s32.8/=       nil            (u32.8) (s32.8 s32.8) :cost 2 :commutative t :encoding :none)
   (two-arg-s32.8>        #:vpcmpgtd     (u32.8) (s32.8 s32.8) :cost 1)
   (two-arg-s32.8<        nil            (u32.8) (s32.8 s32.8) :cost 1 :encoding :none)
   (two-arg-s32.8>=       nil            (u32.8) (s32.8 s32.8) :cost 2 :encoding :none)
   (two-arg-s32.8<=       nil            (u32.8) (s32.8 s32.8) :cost 2 :encoding :none)
   (s32.8-abs             #:vpabsd       (s32.8) (s32.8)       :cost 2)
   (s32.8-hadd            #:vphaddd      (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-hsub            #:vphsubd      (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-shiftl          #:vpsllvd      (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-shiftr          #:vpsrlvd      (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-unpackhi        #:vpunpckhdq   (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-unpacklo        #:vpunpckldq   (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-sign            #:vpsignd      (s32.8) (s32.8 s32.8) :cost 1)
   (s32.8-blend           #:vpblendd     (s32.8) (s32.8 s32.8 sb-simd::imm8) :cost 1)
   (s32.8-extract128      #:vextracti128 (s32.4) (s32.8 sb-simd::imm1) :cost 1)
   (s32.8-insert128       #:vinserti128  (s32.8) (s32.8 s32.4 sb-simd::imm1) :cost 1)
   (s32.8-permute128      #:vperm2i128   (s32.8) (s32.8 s32.8 sb-simd::imm8) :cost 1)
   ;; s64.4
   (make-s64.4            nil            (s64.4) (s64 s64 s64 s64) :cost 1 :encoding :none)
   (s64.4-values          nil            (s64 s64 s64 s64) (s64.4) :cost 1 :encoding :none)
   (s64.4-broadcast       nil            (s64.4) (s64)         :cost 1 :encoding :none)
   (s64.4-broadcastvec    #:vpbroadcastq (s64.4) (s64.4)       :cost 1)
   (s64.4-from-s16.8      #:vpmovsxwq    (s64.4) (s16.8)       :cost 5)
   (s64.4-from-u16.8      #:vpmovsxwq    (s64.4) (u16.8)       :cost 5)
   (s64.4-from-s32.4      #:vpmovsxdq    (s64.4) (s32.4)       :cost 5)
   (s64.4-from-u32.4      #:vpmovsxdq    (s64.4) (u32.4)       :cost 5)
   (s64.4-from-s8.16      #:vpmovsxbq    (s64.4) (s8.16)       :cost 5)
   (s64.4-from-u8.16      #:vpmovsxbq    (s64.4) (u8.16)       :cost 5)
   (two-arg-s64.4-and     #:vpand        (s64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (two-arg-s64.4-or      #:vpor         (s64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (two-arg-s64.4-xor     #:vpxor        (s64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (s64.4-andnot          #:vandnpd      (s64.4) (s64.4 s64.4) :cost 1)
   (s64.4-not             nil            (s64.4) (s64.4)       :cost 1 :encoding :none)
   (two-arg-s64.4+        #:vpaddq       (s64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (two-arg-s64.4-        #:vpsubq       (s64.4) (s64.4 s64.4) :cost 1)
   (two-arg-s64.4-mul     #:vpmuldq      (s64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (two-arg-s64.4=        #:vpcmpeqq     (u64.4) (s64.4 s64.4) :cost 1 :commutative t)
   (two-arg-s64.4/=       nil            (u64.4) (s64.4 s64.4) :cost 2 :commutative t :encoding :none)
   (two-arg-s64.4>        #:vpcmpgtq     (u64.4) (s64.4 s64.4) :cost 1)
   (two-arg-s64.4<        nil            (u64.4) (s64.4 s64.4) :cost 1 :encoding :none)
   (two-arg-s64.4>=       nil            (u64.4) (s64.4 s64.4) :cost 2 :encoding :none)
   (two-arg-s64.4<=       nil            (u64.4) (s64.4 s64.4) :cost 2 :encoding :none)
   (s64.4-shiftl          #:vpsllvq      (s64.4) (s64.4 s64.4) :cost 1)
   (s64.4-shiftr          #:vpsrlvq      (s64.4) (s64.4 s64.4) :cost 1)
   (s64.4-unpackhi        #:vpunpckhqdq  (s64.4) (s64.4 s64.4) :cost 1)
   (s64.4-unpacklo        #:vpunpcklqdq  (s64.4) (s64.4 s64.4) :cost 1)
   (s64.4-extract128      #:vextracti128 (s64.2) (s64.4 sb-simd::imm1) :cost 1)
   (s64.4-insert128       #:vinserti128  (s64.4) (s64.4 s64.2 sb-simd::imm1) :cost 1)
   (s64.4-permute128      #:vperm2i128   (s64.4) (s64.4 s64.4 sb-simd::imm8) :cost 1))
  (:load
   (f32.4-ntload  #:vmovntdqa f32.4 f32vec f32.4-non-temporal-aref f32.4-non-temporal-row-major-aref)
   (f64.2-ntload  #:vmovntdqa f64.2 f64vec f64.2-non-temporal-aref f64.2-non-temporal-row-major-aref)
   (f32.8-ntload  #:vmovntdqa f32.8 f32vec f32.8-non-temporal-aref f32.8-non-temporal-row-major-aref)
   (f64.4-ntload  #:vmovntdqa f64.4 f64vec f64.4-non-temporal-aref f64.4-non-temporal-row-major-aref)
   ;(u8.16-ntload  #:vmovntdqa u8.16 u8vec  u8.16-non-temporal-aref u8.16-non-temporal-row-major-aref)
   (u16.8-ntload  #:vmovntdqa u16.8 u16vec u16.8-non-temporal-aref u16.8-non-temporal-row-major-aref)
   (u32.4-ntload  #:vmovntdqa u32.4 u32vec u32.4-non-temporal-aref u32.4-non-temporal-row-major-aref)
   (u64.2-ntload  #:vmovntdqa u64.2 u64vec u64.2-non-temporal-aref u64.2-non-temporal-row-major-aref)
   ;(s8.16-ntload  #:vmovntdqa s8.16 s8vec  s8.16-non-temporal-aref s8.16-non-temporal-row-major-aref)
   (s16.8-ntload  #:vmovntdqa s16.8 s16vec s16.8-non-temporal-aref s16.8-non-temporal-row-major-aref)
   (s32.4-ntload  #:vmovntdqa s32.4 s32vec s32.4-non-temporal-aref s32.4-non-temporal-row-major-aref)
   (s64.2-ntload  #:vmovntdqa s64.2 s64vec s64.2-non-temporal-aref s64.2-non-temporal-row-major-aref)
   ;(u8.32-ntload  #:vmovntdqa u8.32  u8vec  u8.32-non-temporal-aref  u8.32-non-temporal-row-major-aref)
   (u16.16-ntload #:vmovntdqa u16.16 u16vec u16.16-non-temporal-aref u16.16-non-temporal-row-major-aref)
   (u32.8-ntload  #:vmovntdqa u32.8  u32vec u32.8-non-temporal-aref  u32.8-non-temporal-row-major-aref)
   (u64.4-ntload  #:vmovntdqa u64.4  u64vec u64.4-non-temporal-aref  u64.4-non-temporal-row-major-aref)
   ;(s8.32-ntload  #:vmovntdqa s8.32  s8vec  s8.32-non-temporal-aref  s8.32-non-temporal-row-major-aref)
   (s16.16-ntload #:vmovntdqa s16.16 s16vec s16.16-non-temporal-aref s16.16-non-temporal-row-major-aref)
   (s32.8-ntload  #:vmovntdqa s32.8  s32vec s32.8-non-temporal-aref  s32.8-non-temporal-row-major-aref)
   (s64.4-ntload  #:vmovntdqa s64.4  s64vec s64.4-non-temporal-aref  s64.4-non-temporal-row-major-aref)))
