(in-package #:sb-simd-common)

(define-instruction-set :common
  (:scalars
   ;; Numbers
   (u8      8   (unsigned-byte  8) #:unsigned-num (#:unsigned-reg))
   (u16     16  (unsigned-byte 16) #:unsigned-num (#:unsigned-reg))
   (u32     32  (unsigned-byte 32) #:unsigned-num (#:unsigned-reg))
   (u64     64  (unsigned-byte 64) #:unsigned-num (#:unsigned-reg))
   (s8      8   (signed-byte  8)   #:signed-num   (#:signed-reg))
   (s16     16  (signed-byte 16)   #:signed-num   (#:signed-reg))
   (s32     32  (signed-byte 32)   #:signed-num   (#:signed-reg))
   (s64     64  (signed-byte 64)   #:signed-num   (#:signed-reg))
   (f32     32  single-float       #:single-float (#:single-reg))
   (f64     64  double-float       #:double-float (#:double-reg))
   ;; Vectors
   (u8vec   64  (simple-array (unsigned-byte 8) (*))  #:simple-array-unsigned-byte-8)
   (u16vec  64  (simple-array (unsigned-byte 16) (*)) #:simple-array-unsigned-byte-16)
   (u32vec  64  (simple-array (unsigned-byte 32) (*)) #:simple-array-unsigned-byte-32)
   (u64vec  64  (simple-array (unsigned-byte 64) (*)) #:simple-array-unsigned-byte-64)
   (s8vec   64  (simple-array (signed-byte 8) (*))    #:simple-array-signed-byte-8)
   (s16vec  64  (simple-array (signed-byte 16) (*))   #:simple-array-signed-byte-16)
   (s32vec  64  (simple-array (signed-byte 32) (*))   #:simple-array-signed-byte-32)
   (s64vec  64  (simple-array (signed-byte 64) (*))   #:simple-array-signed-byte-64)
   (f32vec  64  (simple-array single-float (*))       #:simple-array-single-float)
   (f64vec  64  (simple-array double-float (*))       #:simple-array-double-float))
  (:primitives
   ;; ub64 packers and unpackers
   (u64-from-f32  nil (u64) (f32 f32)                 :encoding :none)
   (u64-from-f64  nil (u64) (f64)                     :encoding :none)
   (u64-from-u8s  nil (u64) (u8 u8 u8 u8 u8 u8 u8 u8) :encoding :none)
   (u64-from-u16s nil (u64) (u16 u16 u16 u16)         :encoding :none)
   (u64-from-u32s nil (u64) (u32 u32)                 :encoding :none)
   (u64-from-s8s  nil (u64) (s8 s8 s8 s8 s8 s8 s8 s8) :encoding :none)
   (u64-from-s16s nil (u64) (s16 s16 s16 s16)         :encoding :none)
   (u64-from-s32s nil (u64) (s32 s32)                 :encoding :none)
   (u64-from-s64  nil (u64) (s64)                     :encoding :none)
   ( u8s-from-u64 nil (u8 u8 u8 u8 u8 u8 u8 u8) (u64) :encoding :none)
   (u16s-from-u64 nil (u16 u16 u16 u16) (u64)         :encoding :none)
   (u32s-from-u64 nil (u32 u32) (u64)                 :encoding :none)
   ( s8s-from-u64 nil (s8 s8 s8 s8 s8 s8 s8 s8) (u64) :encoding :none)
   (s16s-from-u64 nil (s16 s16 s16 s16) (u64)         :encoding :none)
   (s32s-from-u64 nil (s32 s32) (u64)                 :encoding :none)
   ( s64-from-u64 nil (s64) (u64)                     :encoding :none)
   ;; f32
   (two-arg-f32-and nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32-or  nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32-xor nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32-max nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32-min nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32+    nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32-    nil (f32) (f32 f32) :encoding :none)
   (two-arg-f32*    nil (f32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32/    nil (f32) (f32 f32) :encoding :none)
   (two-arg-f32=    nil (u32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32/=   nil (u32) (f32 f32) :encoding :none :commutative t)
   (two-arg-f32<    nil (u32) (f32 f32) :encoding :none)
   (two-arg-f32<=   nil (u32) (f32 f32) :encoding :none)
   (two-arg-f32>    nil (u32) (f32 f32) :encoding :none)
   (two-arg-f32>=   nil (u32) (f32 f32) :encoding :none)
   (f32-andc1       nil (f32) (f32 f32) :encoding :none)
   (f32-not         nil (f32) (f32) :encoding :none)
   (f32-reciprocal  nil (f32) (f32) :encoding :none)
   (f32-rsqrt       nil (f32) (f32) :encoding :none)
   (f32-sqrt        nil (f32) (f32) :encoding :none)
   ;; f64
   (two-arg-f64-and nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64-or  nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64-xor nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64-max nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64-min nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64+    nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64-    nil (f64) (f64 f64) :encoding :none)
   (two-arg-f64*    nil (f64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64/    nil (f64) (f64 f64) :encoding :none)
   (two-arg-f64=    nil (u64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64/=   nil (u64) (f64 f64) :encoding :none :commutative t)
   (two-arg-f64<    nil (u64) (f64 f64) :encoding :none)
   (two-arg-f64<=   nil (u64) (f64 f64) :encoding :none)
   (two-arg-f64>    nil (u64) (f64 f64) :encoding :none)
   (two-arg-f64>=   nil (u64) (f64 f64) :encoding :none)
   (f64-andc1       nil (f64) (f64 f64) :encoding :none)
   (f64-not         nil (f64) (f64) :encoding :none)
   (f64-reciprocal  nil (f64) (f64) :encoding :none)
   (f64-rsqrt       nil (f64) (f64) :encoding :none)
   (f64-sqrt        nil (f64) (f64) :encoding :none)
   ;; u8
   (two-arg-u8-and nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8-or  nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8-xor nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8-max nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8-min nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8+    nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8-    nil (u8) (u8 u8) :encoding :none)
   (two-arg-u8=    nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8/=   nil (u8) (u8 u8) :encoding :none :commutative t)
   (two-arg-u8<    nil (u8) (u8 u8) :encoding :none)
   (two-arg-u8<=   nil (u8) (u8 u8) :encoding :none)
   (two-arg-u8>    nil (u8) (u8 u8) :encoding :none)
   (two-arg-u8>=   nil (u8) (u8 u8) :encoding :none)
   (u8-andc1       nil (u8) (u8 u8) :encoding :none)
   (u8-not         nil (u8) (u8)    :encoding :none)
   ;; u16
   (two-arg-u16-and nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16-or  nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16-xor nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16-max nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16-min nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16+    nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16-    nil (u16) (u16 u16) :encoding :none)
   (two-arg-u16=    nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16/=   nil (u16) (u16 u16) :encoding :none :commutative t)
   (two-arg-u16<    nil (u16) (u16 u16) :encoding :none)
   (two-arg-u16<=   nil (u16) (u16 u16) :encoding :none)
   (two-arg-u16>    nil (u16) (u16 u16) :encoding :none)
   (two-arg-u16>=   nil (u16) (u16 u16) :encoding :none)
   (u16-andc1       nil (u16) (u16 u16) :encoding :none)
   (u16-not         nil (u16) (u16)     :encoding :none)
   ;; u32
   (two-arg-u32-and nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32-or  nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32-xor nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32-max nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32-min nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32+    nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32-    nil (u32) (u32 u32) :encoding :none)
   (two-arg-u32=    nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32/=   nil (u32) (u32 u32) :encoding :none :commutative t)
   (two-arg-u32<    nil (u32) (u32 u32) :encoding :none)
   (two-arg-u32<=   nil (u32) (u32 u32) :encoding :none)
   (two-arg-u32>    nil (u32) (u32 u32) :encoding :none)
   (two-arg-u32>=   nil (u32) (u32 u32) :encoding :none)
   (u32-andc1       nil (u32) (u32 u32) :encoding :none)
   (u32-not         nil (u32) (u32)     :encoding :none)
   ;; u64
   (two-arg-u64-and nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64-or  nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64-xor nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64-max nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64-min nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64+    nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64-    nil (u64) (u64 u64) :encoding :none)
   (two-arg-u64=    nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64/=   nil (u64) (u64 u64) :encoding :none :commutative t)
   (two-arg-u64<    nil (u64) (u64 u64) :encoding :none)
   (two-arg-u64<=   nil (u64) (u64 u64) :encoding :none)
   (two-arg-u64>    nil (u64) (u64 u64) :encoding :none)
   (two-arg-u64>=   nil (u64) (u64 u64) :encoding :none)
   (u64-andc1       nil (u64) (u64 u64) :encoding :none)
   (u64-not         nil (u64) (u64)     :encoding :none)
   ;; s8
   (two-arg-s8-and nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8-or  nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8-xor nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8-max nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8-min nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8+    nil (s8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8-    nil (s8) (s8 s8) :encoding :none)
   (two-arg-s8=    nil (u8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8/=   nil (u8) (s8 s8) :encoding :none :commutative t)
   (two-arg-s8<    nil (u8) (s8 s8) :encoding :none)
   (two-arg-s8<=   nil (u8) (s8 s8) :encoding :none)
   (two-arg-s8>    nil (u8) (s8 s8) :encoding :none)
   (two-arg-s8>=   nil (u8) (s8 s8) :encoding :none)
   (s8-andc1       nil (s8) (s8 s8) :encoding :none)
   (s8-not         nil (s8) (s8)    :encoding :none)
   ;; s16
   (two-arg-s16-and nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16-or  nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16-xor nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16-max nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16-min nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16+    nil (s16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16-    nil (s16) (s16 s16) :encoding :none)
   (two-arg-s16=    nil (u16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16/=   nil (u16) (s16 s16) :encoding :none :commutative t)
   (two-arg-s16<    nil (u16) (s16 s16) :encoding :none)
   (two-arg-s16<=   nil (u16) (s16 s16) :encoding :none)
   (two-arg-s16>    nil (u16) (s16 s16) :encoding :none)
   (two-arg-s16>=   nil (u16) (s16 s16) :encoding :none)
   (s16-andc1       nil (s16) (s16 s16) :encoding :none)
   (s16-not         nil (s16) (s16)     :encoding :none)
   ;; s32
   (two-arg-s32-and nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32-or  nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32-xor nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32-max nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32-min nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32+    nil (s32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32-    nil (s32) (s32 s32) :encoding :none)
   (two-arg-s32=    nil (u32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32/=   nil (u32) (s32 s32) :encoding :none :commutative t)
   (two-arg-s32<    nil (u32) (s32 s32) :encoding :none)
   (two-arg-s32<=   nil (u32) (s32 s32) :encoding :none)
   (two-arg-s32>    nil (u32) (s32 s32) :encoding :none)
   (two-arg-s32>=   nil (u32) (s32 s32) :encoding :none)
   (s32-andc1       nil (s32) (s32 s32) :encoding :none)
   (s32-not         nil (s32) (s32)     :encoding :none)
   ;; s64
   (two-arg-s64-and nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64-or  nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64-xor nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64-max nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64-min nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64+    nil (s64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64-    nil (s64) (s64 s64) :encoding :none)
   (two-arg-s64=    nil (u64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64/=   nil (u64) (s64 s64) :encoding :none :commutative t)
   (two-arg-s64<    nil (u64) (s64 s64) :encoding :none)
   (two-arg-s64<=   nil (u64) (s64 s64) :encoding :none)
   (two-arg-s64>    nil (u64) (s64 s64) :encoding :none)
   (two-arg-s64>=   nil (u64) (s64 s64) :encoding :none)
   (s64-andc1       nil (s64) (s64 s64) :encoding :none)
   (s64-not         nil (s64) (s64)     :encoding :none)))
