(in-package #:sb-simd-common)

(define-instruction-set :common
  (:scalars
   ;; Numbers
   (u8      8   (unsigned-byte  8) #:unsigned-num (#:unsigned-reg))
   (u16     16  (unsigned-byte 16) #:unsigned-num (#:unsigned-reg))
   (u32     32  (unsigned-byte 32) #:unsigned-num (#:unsigned-reg))
   (u64     64  (unsigned-byte 64) #:unsigned-num (#:unsigned-reg))
   (s8      8   (signed-byte  8)   #:signed-num   (#:signed-reg))
   (s16     16  (signed-byte 16)   #:signed-num   (#:signed-reg))
   (s32     32  (signed-byte 32)   #:signed-num   (#:signed-reg))
   (s64     64  (signed-byte 64)   #:signed-num   (#:signed-reg))
   (f32     32  single-float       #:single-float (#:single-reg))
   (f64     64  double-float       #:double-float (#:double-reg))
   ;; Vectors
   (u8vec   64  (simple-array (unsigned-byte 8) (*))  #:simple-array-unsigned-byte-8)
   (u16vec  64  (simple-array (unsigned-byte 16) (*)) #:simple-array-unsigned-byte-16)
   (u32vec  64  (simple-array (unsigned-byte 32) (*)) #:simple-array-unsigned-byte-32)
   (u64vec  64  (simple-array (unsigned-byte 64) (*)) #:simple-array-unsigned-byte-64)
   (s8vec   64  (simple-array (signed-byte 8) (*))    #:simple-array-signed-byte-8)
   (s16vec  64  (simple-array (signed-byte 16) (*))   #:simple-array-signed-byte-16)
   (s32vec  64  (simple-array (signed-byte 32) (*))   #:simple-array-signed-byte-32)
   (s64vec  64  (simple-array (signed-byte 64) (*))   #:simple-array-signed-byte-64)
   (f32vec  64  (simple-array single-float (*))       #:simple-array-single-float)
   (f64vec  64  (simple-array double-float (*))       #:simple-array-double-float))
  (:primitives
   (u64-from-u8s  nil (u64) (u8 u8 u8 u8 u8 u8 u8 u8) :encoding :none)
   (u64-from-u16s nil (u64) (u16 u16 u16 u16)         :encoding :none)
   (u64-from-u32s nil (u64) (u32 u32)                 :encoding :none)
   (u64-from-s8s  nil (u64) (s8 s8 s8 s8 s8 s8 s8 s8) :encoding :none)
   (u64-from-s16s nil (u64) (s16 s16 s16 s16)         :encoding :none)
   (u64-from-s32s nil (u64) (s32 s32)                 :encoding :none)
   (u64-from-s64  nil (u64) (s64)                     :encoding :none)
   ( u8s-from-u64 nil (u8 u8 u8 u8 u8 u8 u8 u8) (u64) :encoding :none)
   (u16s-from-u64 nil (u16 u16 u16 u16) (u64)         :encoding :none)
   (u32s-from-u64 nil (u32 u32) (u64)                 :encoding :none)
   ( s8s-from-u64 nil (s8 s8 s8 s8 s8 s8 s8 s8) (u64) :encoding :none)
   (s16s-from-u64 nil (s16 s16 s16 s16) (u64)         :encoding :none)
   (s32s-from-u64 nil (s32 s32) (u64)                 :encoding :none)
   ( s64-from-u64 nil (s64) (u64)                     :encoding :none)))
