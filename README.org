#+TITLE: sb-simd

This library provides a convenient SIMD interface for SBCL.  We provide a
SIMD wrapper for each Common Lisp function that operates on numbers.

* Types
The elements of a SIMD pack must be signed integers, unsigned integers, or
floating point numbers.  The corresponding element type specifiers start
with the prefix =s=, =u=, or =f=, respectively, followed by the number of
bits of that element.  For example, a 32bit floating point numbers would be
of type =f32=.

The type of a SIMD pack is the name of its element type, followed by a dot,
followed by its width.  A four element pack of 64bit floating point numbers
would therefore be called =f64.4=.

* Instructions
The following table contains all functions provided by this library.  For
brevity, instructions that differ only in the type they operate on are
grouped together, where SIMD types are abbreviated as P, and SIMD element
types are abbreviated as E.

| Name              | SETFable | Behavior                                                                                                             |
|-------------------+----------+----------------------------------------------------------------------------------------------------------------------|
| simd-width        | No       | Returns the width of a supplied SIMD type specifier.                                                                 |
| simd-element-type | No       | Returns the element type of a supplied SIMD type specifier.                                                          |
| E                 | No       | Equivalent to =(lambda (x) (coerce x 'E))=.                                                                          |
| P                 | No       | Expects =(simd-width 'P)= arguments that can be coerced to =(simd-element-type 'P)=.  Returns a SIMD pack of type P. |
| P-values          | Yes      | Returns the elements of the supplied SIMD pack as multiple values.                                                   |
| P-ref             | Yes      | Returns a SIMD pack containing =(simd-width 'P)= consecutive elements.                                               |

* Examples
** Vector Sum
#+BEGIN_SRC lisp
(defun vsum (vector)
  (declare (type (simple-array f64 (*)) src))
  (let ((acc1 (f64.4 0 0 0 0))
        (acc2 (f64 0d0)))
    (declare (type f64.4 acc1)
             (type f64 acc2))
    (multiple-value-bind (quotient remainder)
        (floor (length src) 4)
      (dotimes (index quotient)
        (setf acc1 (f64.4-+ acc1 (f64.4-ref src (* 4 index)))))
      (dotimes (index remainder)
        (incf acc2 (f64-ref src (+ (* 4 quotient) index))))
      (multiple-value-call #'+ (f64.4-values acc1) acc2))))
#+END_SRC
